2017-08-16 11:39:20,387 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8607 for client with pid 12045 
2017-08-16 11:39:20,397 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8608 for client with pid 11277 
2017-08-16 11:39:20,408 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8609 for client with pid 5902 
2017-08-16 11:39:20,418 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8610 for client with pid 1039 
2017-08-16 11:39:20,434 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8611 for client with pid 4751 
2017-08-16 11:39:20,445 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8612 for client with pid 11922 
2017-08-16 11:39:20,455 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8613 for client with pid 30483 
2017-08-16 11:39:20,461 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8614 for client with pid 5909 
2017-08-16 11:39:20,477 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8615 for client with pid 4247 
2017-08-16 11:39:20,487 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8616 for client with pid 7319 
2017-08-16 11:39:20,498 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8617 for client with pid 7450 
2017-08-16 11:39:20,508 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8618 for client with pid 11293 
2017-08-16 11:39:20,524 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8619 for client with pid 19359 
2017-08-16 11:39:20,535 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8620 for client with pid 15649 
2017-08-16 11:39:20,545 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8621 for client with pid 4643 
2017-08-16 11:39:20,561 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8622 for client with pid 13091 
2017-08-16 11:39:20,571 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8623 for client with pid 1321 
2017-08-16 11:39:20,587 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8624 for client with pid 7083 
2017-08-16 11:39:20,603 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8625 for client with pid 2220 
2017-08-16 11:39:20,613 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8626 for client with pid 16428 
2017-08-16 11:39:20,624 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8627 for client with pid 23343 
2017-08-16 11:39:20,634 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8628 for client with pid 6959 
2017-08-16 11:39:20,650 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8629 for client with pid 8243 
2017-08-16 11:39:20,666 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8630 for client with pid 20917 
2017-08-16 11:39:20,681 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8631 for client with pid 5944 
2017-08-16 11:39:20,692 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8632 for client with pid 697 
2017-08-16 11:39:20,702 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8633 for client with pid 6074 
2017-08-16 11:39:20,718 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8634 for client with pid 11450 
2017-08-16 11:39:20,729 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8635 for client with pid 5053 
2017-08-16 11:39:20,744 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8636 for client with pid 5951 
2017-08-16 11:39:20,755 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8637 for client with pid 16323 
2017-08-16 11:39:20,765 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8638 for client with pid 16197 
2017-08-16 11:39:20,776 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8639 for client with pid 21191 
2017-08-16 11:39:20,786 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8640 for client with pid 16457 
2017-08-16 11:39:20,802 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8641 for client with pid 10315 
2017-08-16 11:39:20,812 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8642 for client with pid 22992 
2017-08-16 11:39:20,823 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8643 for client with pid 5972 
2017-08-16 11:39:20,833 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8644 for client with pid 8533 
2017-08-16 11:39:20,849 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8645 for client with pid 23766 
2017-08-16 11:39:20,865 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8646 for client with pid 6359 
2017-08-16 11:39:20,875 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8647 for client with pid 16344 
2017-08-16 11:39:20,886 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8648 for client with pid 6105 
2017-08-16 11:39:20,897 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8649 for client with pid 16602 
2017-08-16 11:39:20,907 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8650 for client with pid 5724 
2017-08-16 11:39:20,918 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8651 for client with pid 11744 
2017-08-16 11:39:20,928 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8652 for client with pid 16359 
2017-08-16 11:39:20,939 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8653 for client with pid 5864 
2017-08-16 11:39:20,955 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8654 for client with pid 15978 
2017-08-16 11:39:20,965 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8655 for client with pid 16875 
2017-08-16 11:39:20,981 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8656 for client with pid 21232 
2017-08-16 11:39:20,991 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8657 for client with pid 12017 
2017-08-16 11:39:21,007 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8658 for client with pid 22514 
2017-08-16 11:39:21,022 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8659 for client with pid 7796 
2017-08-16 11:39:21,038 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8660 for client with pid 27385 
2017-08-16 11:39:21,038 [nt Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,632 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,633 [st Monitor]   WARN -            #com.android.ddmlib - Adb connection Error:EOF 
2017-08-16 11:39:22,633 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,633 [st Monitor]   INFO - id.tools.idea.ddms.DevicePanel - Device disconnected: oneplus-one_a2003-192.168.51.17:5555 
2017-08-16 11:39:22,633 [st Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device disconnected: 192.168.51.17:5555 
2017-08-16 11:39:22,633 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,633 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 1 
2017-08-16 11:39:22,633 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,633 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,633 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,633 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,633 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,633 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,633 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,633 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,633 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,634 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,635 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,635 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,635 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,635 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,635 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,635 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,635 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,635 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,635 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,635 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,635 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,635 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,635 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,635 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,635 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,636 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,636 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,636 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,636 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,636 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,636 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,636 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,636 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,636 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,636 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,636 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,637 [51.17:5555]   WARN -            #com.android.ddmlib - Error during Sync: Connection reset by peer 
2017-08-16 11:39:22,637 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,637 [51.17:5555]   WARN - rs.StudioProfilerDeviceManager - Error when trying to spawn perfd: 
2017-08-16 11:39:22,637 [51.17:5555]   WARN - rs.StudioProfilerDeviceManager - Connection reset by peer 
java.io.IOException: Connection reset by peer
	at sun.nio.ch.FileDispatcherImpl.read0(Native Method)
	at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:39)
	at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223)
	at sun.nio.ch.IOUtil.read(IOUtil.java:197)
	at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:380)
	at com.android.ddmlib.AdbHelper.read(AdbHelper.java:870)
	at com.android.ddmlib.SyncService.doPushFile(SyncService.java:723)
	at com.android.ddmlib.SyncService.pushFile(SyncService.java:408)
	at com.android.ddmlib.Device.pushFile(Device.java:844)
	at com.android.tools.idea.profilers.StudioProfilerDeviceManager$PerfdThread.copyFileToDevice(StudioProfilerDeviceManager.java:264)
	at com.android.tools.idea.profilers.StudioProfilerDeviceManager$PerfdThread.run(StudioProfilerDeviceManager.java:179)
2017-08-16 11:39:22,637 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,637 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:22,637 [   Monitor]   INFO - mpl.AdbDeviceFileSystemService - Device changed: 192.168.51.17:5555 
2017-08-16 11:39:23,633 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 2 
2017-08-16 11:39:57,326 [st Monitor]   WARN -            #com.android.ddmlib - Adb connection Error:EOF 
2017-08-16 11:39:57,326 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 1 
2017-08-16 11:39:58,326 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 2 
2017-08-16 11:40:02,635 [st Monitor]   WARN -            #com.android.ddmlib - Adb connection Error:EOF 
2017-08-16 11:40:02,636 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 1 
2017-08-16 11:40:03,636 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 2 
2017-08-16 11:40:04,636 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 3 
2017-08-16 11:41:48,774 [st Monitor]   WARN -            #com.android.ddmlib - Adb connection Error:EOF 
2017-08-16 11:41:48,774 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 1 
2017-08-16 11:41:49,774 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 2 
2017-08-16 11:41:52,632 [st Monitor]   WARN -            #com.android.ddmlib - Adb connection Error:EOF 
2017-08-16 11:41:52,632 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 1 
2017-08-16 11:41:53,632 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 2 
2017-08-16 11:41:54,632 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 3 
2017-08-16 11:42:37,498 [st Monitor]   WARN -            #com.android.ddmlib - Adb connection Error:EOF 
2017-08-16 11:42:37,499 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 1 
2017-08-16 11:42:38,499 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 2 
2017-08-16 11:42:42,632 [st Monitor]   WARN -            #com.android.ddmlib - Adb connection Error:EOF 
2017-08-16 11:42:42,632 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 1 
2017-08-16 11:42:43,633 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 2 
2017-08-16 11:42:44,633 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 3 
2017-08-16 11:42:49,342 [st Monitor]   WARN -            #com.android.ddmlib - Adb connection Error:EOF 
2017-08-16 11:42:49,342 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 1 
2017-08-16 11:42:50,343 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 2 
2017-08-16 11:42:51,343 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 3 
2017-08-16 11:42:52,713 [st Monitor]   WARN -            #com.android.ddmlib - Adb connection Error:EOF 
2017-08-16 11:42:52,714 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 1 
2017-08-16 11:42:53,714 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 2 
2017-08-16 11:42:54,714 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 3 
2017-08-16 11:42:56,296 [st Monitor]   WARN -            #com.android.ddmlib - Adb connection Error:EOF 
2017-08-16 11:42:56,296 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 1 
2017-08-16 11:42:57,296 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 2 
2017-08-16 11:43:02,632 [st Monitor]   WARN -            #com.android.ddmlib - Adb connection Error:EOF 
2017-08-16 11:43:02,633 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 1 
2017-08-16 11:43:03,633 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 2 
2017-08-16 11:43:04,633 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 3 
2017-08-16 11:43:28,195 [st Monitor]   WARN -            #com.android.ddmlib - Adb connection Error:EOF 
2017-08-16 11:43:28,195 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 1 
2017-08-16 11:43:29,196 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 2 
2017-08-16 11:43:30,196 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 3 
2017-08-16 11:43:31,197 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 4 
2017-08-16 11:43:32,197 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 5 
2017-08-16 11:43:33,475 [ - logging]   INFO -        #com.intellij.idea.Main - ------------------------------------------------------ IDE SHUTDOWN ------------------------------------------------------ 
2017-08-16 11:43:33,476 [wn tracker]   INFO - il.indexing.FileBasedIndexImpl - START INDEX SHUTDOWN 
2017-08-16 11:43:33,559 [wn tracker]   INFO - il.indexing.FileBasedIndexImpl - END INDEX SHUTDOWN 
2017-08-16 11:43:33,559 [wn tracker]   INFO - stubs.SerializationManagerImpl - START StubSerializationManager SHUTDOWN 
2017-08-16 11:43:33,559 [wn tracker]   INFO - stubs.SerializationManagerImpl - END StubSerializationManager SHUTDOWN 
2017-08-16 11:43:33,564 [wn tracker]   INFO - newvfs.persistent.PersistentFS - VFS dispose started 
2017-08-16 11:43:33,567 [wn tracker]   INFO - newvfs.persistent.PersistentFS - VFS dispose completed 
2017-08-16 11:43:33,569 [wn tracker]   INFO - org.jetbrains.io.BuiltInServer - web server stopped 
2017-08-16 11:43:55,617 [ain Thread]   INFO -        #com.intellij.idea.Main - ------------------------------------------------------ IDE STARTED ------------------------------------------------------ 
2017-08-16 11:43:55,626 [se-884-b01]   INFO -        #com.intellij.idea.Main - IDE: Android Studio (build #AI-171.4220116, 27 Jul 2017 01:55) 
2017-08-16 11:43:55,626 [se-884-b01]   INFO -        #com.intellij.idea.Main - OS: Linux (4.10.0-30-generic, amd64) 
2017-08-16 11:43:55,626 [se-884-b01]   INFO -        #com.intellij.idea.Main - JRE: 1.8.0_152-release-884-b01 (JetBrains s.r.o) 
2017-08-16 11:43:55,626 [se-884-b01]   INFO -        #com.intellij.idea.Main - JVM: 25.152-b01 (OpenJDK 64-Bit Server VM) 
2017-08-16 11:43:55,627 [se-884-b01]   INFO -        #com.intellij.idea.Main - JVM Args: -Xbootclasspath/a:/home/matti/Tools/android-studio-canary/android-studio/lib/boot.jar -Xms256m -Xmx1280m -XX:ReservedCodeCacheSize=240m -XX:+UseConcMarkSweepGC -XX:SoftRefLRUPolicyMSPerMB=50 -Dsun.io.useCanonCaches=false -Djava.net.preferIPv4Stack=true -Djna.nosys=true -Djna.boot.library.path= -XX:MaxJavaStackTraceDepth=-1 -XX:+HeapDumpOnOutOfMemoryError -XX:-OmitStackTraceInFastThrow -ea -Dawt.useSystemAAFontSettings=lcd -Dsun.java2d.renderer=sun.java2d.marlin.MarlinRenderingEngine -Xmx4g -XX:ErrorFile=/home/matti/java_error_in_STUDIO_%p.log -XX:HeapDumpPath=/home/matti/java_error_in_STUDIO.hprof -Didea.paths.selector=AndroidStudioPreview3.0 -Djb.vmOptionsFile=/home/matti/Tools/android-studio-canary/android-studio/bin/studio64.vmoptions,/home/matti/.AndroidStudioPreview3.0/studio64.vmoptions -Didea.platform.prefix=AndroidStudio -Didea.jre.check=true 
2017-08-16 11:43:55,628 [se-884-b01]   INFO -        #com.intellij.idea.Main - ext: /home/matti/Tools/android-studio-canary/android-studio/jre/jre/lib/ext: [cldrdata.jar, zipfs.jar, jaccess.jar, sunjce_provider.jar, localedata.jar, sunec.jar, meta-index, sunpkcs11.jar, nashorn.jar, dnsns.jar] 
2017-08-16 11:43:55,628 [se-884-b01]   INFO -        #com.intellij.idea.Main - JNU charset: ANSI_X3.4-1968 
2017-08-16 11:43:55,638 [se-884-b01]   INFO -        #com.intellij.idea.Main - JNA library (64-bit) loaded in 10 ms 
2017-08-16 11:43:55,671 [se-884-b01]   INFO -     #com.intellij.util.ui.JBUI - UI scale factor: 1.0 
2017-08-16 11:43:55,717 [entQueue-0]   INFO - .intellij.idea.IdeaApplication - WM detected: Compiz 
2017-08-16 11:43:56,035 [entQueue-0]   INFO - llij.ide.plugins.PluginManager - Cannot find optional descriptor duplicates-groovy.xml 
2017-08-16 11:43:56,306 [entQueue-0]   INFO - llij.ide.plugins.PluginManager - 38 plugins initialized in 436 ms 
2017-08-16 11:43:56,307 [entQueue-0]   INFO - llij.ide.plugins.PluginManager - Loaded bundled plugins: Android APK Support (1.0), Android Games (1.0), Android NDK Support (1.0), Android Support (10.3.0 Canary 9), App Links Assistant (0.1), CVS Integration (11), Copyright (8.1), Coverage (171.4249.39), EditorConfig (171.4249.39), Firebase App Indexing (0.1), Firebase Services (0.1), Firebase Testing (1.0), Git Integration (8.1), GitHub (171.4249.39), Google Cloud Tools Core (0.2.8), Google Cloud Tools For Android Studio (0.2.8), Google Developers Samples (0.3.1), Google Login (1.0), Google Services (0.1), Gradle (171.4249.39), Groovy (9.0), I18n for Java (171.4249.39), IDEA CORE (171.4249.39), IntelliLang (8.0), JUnit (1.0), Java Bytecode Decompiler (171.4249.39), Properties Support (171.4249.39), Settings Repository (171.4249.39), Smali Support (1.0), Subversion Integration (1.1), Task Management (1.0), Terminal (0.1), Test Recorder (1.0), TestNG-J (8.0), YAML (171.4249.39), hg4idea (10.0) 
2017-08-16 11:43:56,307 [entQueue-0]   INFO - llij.ide.plugins.PluginManager - Loaded custom plugins: Key promoter (3.1.1), Kotlin (1.1.4-release-Studio3.0-1) 
2017-08-16 11:43:57,197 [entQueue-0]   INFO - ij.components.ComponentManager - com.intellij.openapi.components.impl.ServiceManagerImpl initialized in 69 ms 
2017-08-16 11:43:57,246 [entQueue-0]   INFO - ellij.util.io.PagedFileStorage - lower=100; upper=500; buffer=10; max=3992 
2017-08-16 11:43:57,293 [entQueue-0]   INFO - ij.components.ComponentManager - com.intellij.openapi.vfs.newvfs.persistent.PersistentFSImpl initialized in 61 ms 
2017-08-16 11:43:57,296 [entQueue-0]   INFO - pl.local.NativeFileWatcherImpl - Starting file watcher: /home/matti/Tools/android-studio-canary/android-studio/bin/fsnotifier64 
2017-08-16 11:43:57,303 [entQueue-0]   INFO - pl.local.NativeFileWatcherImpl - Native file watcher is operational. 
2017-08-16 11:43:57,304 [entQueue-0]   INFO - ij.components.ComponentManager - com.intellij.openapi.vfs.impl.local.LocalFileSystemImpl initialized in 73 ms 
2017-08-16 11:43:57,308 [entQueue-0]   INFO - ij.components.ComponentManager - com.intellij.openapi.vfs.PlatformVirtualFileManager initialized in 80 ms 
2017-08-16 11:43:57,388 [entQueue-0]   INFO - pi.util.registry.RegistryState - Registry values changed by user: 
2017-08-16 11:43:57,388 [entQueue-0]   INFO - pi.util.registry.RegistryState -   search.everywhere.settings = true 
2017-08-16 11:43:57,388 [entQueue-0]   INFO - ij.components.ComponentManager - com.intellij.openapi.util.registry.RegistryState initialized in 22 ms 
2017-08-16 11:43:57,404 [entQueue-0]   INFO - ij.components.ComponentManager - com.intellij.internal.statistic.updater.SendStatisticsComponent initialized in 15 ms 
2017-08-16 11:43:57,534 [entQueue-0]   INFO - ij.components.ComponentManager - com.intellij.openapi.fileTypes.impl.FileTypeManagerImpl initialized in 127 ms 
2017-08-16 11:43:57,555 [entQueue-0]   INFO - ij.components.ComponentManager - com.intellij.openapi.keymap.impl.KeymapManagerImpl initialized in 17 ms 
2017-08-16 11:43:57,680 [entQueue-0]   INFO - ij.components.ComponentManager - com.intellij.openapi.actionSystem.impl.ActionManagerImpl initialized in 143 ms 
2017-08-16 11:43:57,688 [entQueue-0]   INFO - ij.components.ComponentManager - com.intellij.openapi.editor.impl.EditorFactoryImpl initialized in 151 ms 
2017-08-16 11:43:57,741 [entQueue-0]   INFO - ij.components.ComponentManager - com.intellij.ide.ui.laf.LafManagerImpl initialized in 42 ms 
2017-08-16 11:43:57,828 [entQueue-0]   INFO - til.net.ssl.CertificateManager - Default SSL context initialized 
2017-08-16 11:43:57,829 [entQueue-0]   INFO - ij.components.ComponentManager - com.intellij.util.net.ssl.CertificateManager initialized in 74 ms 
2017-08-16 11:43:57,879 [entQueue-0]   INFO - ij.components.ComponentManager - com.intellij.ide.SystemHealthMonitor initialized in 49 ms 
2017-08-16 11:43:57,885 [d thread 1]   INFO - rains.ide.BuiltInServerManager - built-in server started, port 63342 
2017-08-16 11:43:57,893 [entQueue-0]   INFO - ij.components.ComponentManager - com.intellij.openapi.wm.impl.FocusManagerImpl initialized in 12 ms 
2017-08-16 11:43:57,910 [entQueue-0]   INFO - gs.impl.UpdateCheckerComponent - channel: eap 
2017-08-16 11:43:57,932 [se-884-b01]   INFO - ij.components.ComponentManager - com.intellij.openapi.updateSettings.impl.UpdateCheckerComponent initialized in 26 ms 
2017-08-16 11:43:58,034 [se-884-b01]   INFO - il.indexing.FileBasedIndexImpl - Index exts enumerated:96 
2017-08-16 11:43:58,037 [se-884-b01]   INFO - il.indexing.FileBasedIndexImpl - Index scheduled:2 
2017-08-16 11:43:58,037 [se-884-b01]   INFO - ij.components.ComponentManager - com.intellij.util.indexing.FileBasedIndexImpl initialized in 103 ms 
2017-08-16 11:43:58,053 [se-884-b01]   INFO - tellij.psi.stubs.StubIndexImpl - All stub exts enumerated:12 
2017-08-16 11:43:58,054 [se-884-b01]   INFO - tellij.psi.stubs.StubIndexImpl - stub exts update scheduled:0 
2017-08-16 11:43:58,054 [se-884-b01]   INFO - ij.components.ComponentManager - com.intellij.psi.stubs.StubIndexImpl initialized in 16 ms 
2017-08-16 11:43:58,073 [se-884-b01]   INFO - j.ide.script.IdeStartupScripts - 0 startup script(s) found 
2017-08-16 11:43:58,073 [se-884-b01]   INFO - ij.components.ComponentManager - com.intellij.ide.script.IdeStartupScripts initialized in 15 ms 
2017-08-16 11:43:58,236 [se-884-b01]   INFO - ij.components.ComponentManager - com.intellij.openapi.components.impl.ServiceManagerImpl initialized in 11 ms 
2017-08-16 11:43:58,279 [se-884-b01]   INFO - ij.components.ComponentManager - com.intellij.codeInsight.daemon.impl.DaemonCodeAnalyzerImpl initialized in 16 ms 
2017-08-16 11:43:58,366 [se-884-b01]   INFO - ij.components.ComponentManager - com.intellij.execution.impl.RunManagerImpl initialized in 78 ms 
2017-08-16 11:43:58,376 [d thread 1]   INFO - ij.psi.stubs.StubUpdatingIndex - Stub version was changed for Kotlin 
2017-08-16 11:43:58,378 [se-884-b01]   INFO - ij.components.ComponentManager - com.intellij.openapi.vcs.impl.ProjectLevelVcsManagerImpl initialized in 11 ms 
2017-08-16 11:43:58,393 [se-884-b01]   INFO - ij.components.ComponentManager - com.intellij.profile.codeInspection.ProjectInspectionProfileManager initialized in 15 ms 
2017-08-16 11:43:58,407 [se-884-b01]   INFO - ellij.project.impl.ProjectImpl - 19 project components initialized in 224 ms 
2017-08-16 11:43:58,409 [d thread 1]   INFO - pl$FileIndexDataInitialization - Initialization done:372 
2017-08-16 11:43:58,451 [d thread 1]   INFO - exImpl$StubIndexInitialization - Initialization done:41 
2017-08-16 11:43:59,138 [se-884-b01]   INFO - ij.components.ComponentManager - com.android.tools.idea.AndroidInitialConfigurator initialized in 1017 ms 
2017-08-16 11:43:59,253 [se-884-b01]   INFO - ij.components.ComponentManager - com.jetbrains.cidr.lang.dfa.contextSensitive.OCSourceGliderComponent initialized in 105 ms 
2017-08-16 11:43:59,267 [se-884-b01]   INFO - ij.components.ComponentManager - org.jetbrains.kotlin.idea.PluginStartupComponent initialized in 13 ms 
2017-08-16 11:43:59,465 [se-884-b01]   INFO - il.indexing.FileBasedIndexImpl - Rebuild requested for index org.jetbrains.kotlin.idea.versions.KotlinJvmMetadataVersionIndex 
java.lang.Throwable
	at com.intellij.util.indexing.FileBasedIndex.requestRebuild(FileBasedIndex.java:72)
	at org.jetbrains.kotlin.idea.versions.KotlinUpdatePluginComponent.initComponent(KotlinUpdatePluginComponent.kt:54)
	at com.intellij.openapi.components.impl.ComponentManagerImpl$ComponentConfigComponentAdapter.getComponentInstance(ComponentManagerImpl.java:491)
	at com.intellij.openapi.components.impl.ComponentManagerImpl.createComponents(ComponentManagerImpl.java:120)
	at com.intellij.openapi.application.impl.ApplicationImpl.lambda$createComponents$8(ApplicationImpl.java:466)
	at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$1(CoreProgressManager.java:176)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(CoreProgressManager.java:163)
	at com.intellij.openapi.application.impl.ApplicationImpl.createComponents(ApplicationImpl.java:473)
	at com.intellij.openapi.components.impl.ComponentManagerImpl.init(ComponentManagerImpl.java:104)
	at com.intellij.openapi.application.impl.ApplicationImpl.load(ApplicationImpl.java:425)
	at com.intellij.openapi.application.impl.ApplicationImpl.load(ApplicationImpl.java:411)
	at com.intellij.idea.IdeaApplication.run(IdeaApplication.java:206)
	at com.intellij.idea.MainImpl$1.lambda$null$0(MainImpl.java:49)
	at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:762)
	at java.awt.EventQueue.access$500(EventQueue.java:98)
	at java.awt.EventQueue$3.run(EventQueue.java:715)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:732)
	at com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.java:343)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)
2017-08-16 11:43:59,479 [se-884-b01]   INFO - il.indexing.FileBasedIndexImpl - Rebuild requested for index org.jetbrains.kotlin.idea.versions.KotlinJsMetadataVersionIndex 
java.lang.Throwable
	at com.intellij.util.indexing.FileBasedIndex.requestRebuild(FileBasedIndex.java:72)
	at org.jetbrains.kotlin.idea.versions.KotlinUpdatePluginComponent.initComponent(KotlinUpdatePluginComponent.kt:55)
	at com.intellij.openapi.components.impl.ComponentManagerImpl$ComponentConfigComponentAdapter.getComponentInstance(ComponentManagerImpl.java:491)
	at com.intellij.openapi.components.impl.ComponentManagerImpl.createComponents(ComponentManagerImpl.java:120)
	at com.intellij.openapi.application.impl.ApplicationImpl.lambda$createComponents$8(ApplicationImpl.java:466)
	at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$1(CoreProgressManager.java:176)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(CoreProgressManager.java:163)
	at com.intellij.openapi.application.impl.ApplicationImpl.createComponents(ApplicationImpl.java:473)
	at com.intellij.openapi.components.impl.ComponentManagerImpl.init(ComponentManagerImpl.java:104)
	at com.intellij.openapi.application.impl.ApplicationImpl.load(ApplicationImpl.java:425)
	at com.intellij.openapi.application.impl.ApplicationImpl.load(ApplicationImpl.java:411)
	at com.intellij.idea.IdeaApplication.run(IdeaApplication.java:206)
	at com.intellij.idea.MainImpl$1.lambda$null$0(MainImpl.java:49)
	at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:762)
	at java.awt.EventQueue.access$500(EventQueue.java:98)
	at java.awt.EventQueue$3.run(EventQueue.java:715)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:732)
	at com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.java:343)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)
2017-08-16 11:43:59,480 [se-884-b01]   INFO - il.indexing.FileBasedIndexImpl - Rebuild requested for index org.jetbrains.kotlin.idea.vfilefinder.KotlinClassFileIndex 
java.lang.Throwable
	at com.intellij.util.indexing.FileBasedIndex.requestRebuild(FileBasedIndex.java:72)
	at org.jetbrains.kotlin.idea.versions.KotlinUpdatePluginComponent.initComponent(KotlinUpdatePluginComponent.kt:56)
	at com.intellij.openapi.components.impl.ComponentManagerImpl$ComponentConfigComponentAdapter.getComponentInstance(ComponentManagerImpl.java:491)
	at com.intellij.openapi.components.impl.ComponentManagerImpl.createComponents(ComponentManagerImpl.java:120)
	at com.intellij.openapi.application.impl.ApplicationImpl.lambda$createComponents$8(ApplicationImpl.java:466)
	at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$1(CoreProgressManager.java:176)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(CoreProgressManager.java:163)
	at com.intellij.openapi.application.impl.ApplicationImpl.createComponents(ApplicationImpl.java:473)
	at com.intellij.openapi.components.impl.ComponentManagerImpl.init(ComponentManagerImpl.java:104)
	at com.intellij.openapi.application.impl.ApplicationImpl.load(ApplicationImpl.java:425)
	at com.intellij.openapi.application.impl.ApplicationImpl.load(ApplicationImpl.java:411)
	at com.intellij.idea.IdeaApplication.run(IdeaApplication.java:206)
	at com.intellij.idea.MainImpl$1.lambda$null$0(MainImpl.java:49)
	at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:762)
	at java.awt.EventQueue.access$500(EventQueue.java:98)
	at java.awt.EventQueue$3.run(EventQueue.java:715)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:732)
	at com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.java:343)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)
2017-08-16 11:43:59,481 [se-884-b01]   INFO - il.indexing.FileBasedIndexImpl - Rebuild requested for index org.jetbrains.kotlin.idea.vfilefinder.KotlinJavaScriptMetaFileIndex 
java.lang.Throwable
	at com.intellij.util.indexing.FileBasedIndex.requestRebuild(FileBasedIndex.java:72)
	at org.jetbrains.kotlin.idea.versions.KotlinUpdatePluginComponent.initComponent(KotlinUpdatePluginComponent.kt:57)
	at com.intellij.openapi.components.impl.ComponentManagerImpl$ComponentConfigComponentAdapter.getComponentInstance(ComponentManagerImpl.java:491)
	at com.intellij.openapi.components.impl.ComponentManagerImpl.createComponents(ComponentManagerImpl.java:120)
	at com.intellij.openapi.application.impl.ApplicationImpl.lambda$createComponents$8(ApplicationImpl.java:466)
	at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$1(CoreProgressManager.java:176)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(CoreProgressManager.java:163)
	at com.intellij.openapi.application.impl.ApplicationImpl.createComponents(ApplicationImpl.java:473)
	at com.intellij.openapi.components.impl.ComponentManagerImpl.init(ComponentManagerImpl.java:104)
	at com.intellij.openapi.application.impl.ApplicationImpl.load(ApplicationImpl.java:425)
	at com.intellij.openapi.application.impl.ApplicationImpl.load(ApplicationImpl.java:411)
	at com.intellij.idea.IdeaApplication.run(IdeaApplication.java:206)
	at com.intellij.idea.MainImpl$1.lambda$null$0(MainImpl.java:49)
	at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:762)
	at java.awt.EventQueue.access$500(EventQueue.java:98)
	at java.awt.EventQueue$3.run(EventQueue.java:715)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:732)
	at com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.java:343)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)
2017-08-16 11:43:59,482 [se-884-b01]   INFO - il.indexing.FileBasedIndexImpl - Rebuild requested for index org.jetbrains.kotlin.idea.vfilefinder.KotlinMetadataFileIndex 
java.lang.Throwable
	at com.intellij.util.indexing.FileBasedIndex.requestRebuild(FileBasedIndex.java:72)
	at org.jetbrains.kotlin.idea.versions.KotlinUpdatePluginComponent.initComponent(KotlinUpdatePluginComponent.kt:58)
	at com.intellij.openapi.components.impl.ComponentManagerImpl$ComponentConfigComponentAdapter.getComponentInstance(ComponentManagerImpl.java:491)
	at com.intellij.openapi.components.impl.ComponentManagerImpl.createComponents(ComponentManagerImpl.java:120)
	at com.intellij.openapi.application.impl.ApplicationImpl.lambda$createComponents$8(ApplicationImpl.java:466)
	at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$1(CoreProgressManager.java:176)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(CoreProgressManager.java:163)
	at com.intellij.openapi.application.impl.ApplicationImpl.createComponents(ApplicationImpl.java:473)
	at com.intellij.openapi.components.impl.ComponentManagerImpl.init(ComponentManagerImpl.java:104)
	at com.intellij.openapi.application.impl.ApplicationImpl.load(ApplicationImpl.java:425)
	at com.intellij.openapi.application.impl.ApplicationImpl.load(ApplicationImpl.java:411)
	at com.intellij.idea.IdeaApplication.run(IdeaApplication.java:206)
	at com.intellij.idea.MainImpl$1.lambda$null$0(MainImpl.java:49)
	at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:762)
	at java.awt.EventQueue.access$500(EventQueue.java:98)
	at java.awt.EventQueue$3.run(EventQueue.java:715)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:732)
	at com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.java:343)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)
2017-08-16 11:43:59,484 [se-884-b01]   INFO - il.indexing.FileBasedIndexImpl - Rebuild requested for index org.jetbrains.kotlin.idea.vfilefinder.KotlinMetadataFilePackageIndex 
java.lang.Throwable
	at com.intellij.util.indexing.FileBasedIndex.requestRebuild(FileBasedIndex.java:72)
	at org.jetbrains.kotlin.idea.versions.KotlinUpdatePluginComponent.initComponent(KotlinUpdatePluginComponent.kt:59)
	at com.intellij.openapi.components.impl.ComponentManagerImpl$ComponentConfigComponentAdapter.getComponentInstance(ComponentManagerImpl.java:491)
	at com.intellij.openapi.components.impl.ComponentManagerImpl.createComponents(ComponentManagerImpl.java:120)
	at com.intellij.openapi.application.impl.ApplicationImpl.lambda$createComponents$8(ApplicationImpl.java:466)
	at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$1(CoreProgressManager.java:176)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(CoreProgressManager.java:163)
	at com.intellij.openapi.application.impl.ApplicationImpl.createComponents(ApplicationImpl.java:473)
	at com.intellij.openapi.components.impl.ComponentManagerImpl.init(ComponentManagerImpl.java:104)
	at com.intellij.openapi.application.impl.ApplicationImpl.load(ApplicationImpl.java:425)
	at com.intellij.openapi.application.impl.ApplicationImpl.load(ApplicationImpl.java:411)
	at com.intellij.idea.IdeaApplication.run(IdeaApplication.java:206)
	at com.intellij.idea.MainImpl$1.lambda$null$0(MainImpl.java:49)
	at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:762)
	at java.awt.EventQueue.access$500(EventQueue.java:98)
	at java.awt.EventQueue$3.run(EventQueue.java:715)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:732)
	at com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.java:343)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)
2017-08-16 11:43:59,485 [se-884-b01]   INFO - il.indexing.FileBasedIndexImpl - Rebuild requested for index org.jetbrains.kotlin.idea.vfilefinder.KotlinModuleMappingIndex 
java.lang.Throwable
	at com.intellij.util.indexing.FileBasedIndex.requestRebuild(FileBasedIndex.java:72)
	at org.jetbrains.kotlin.idea.versions.KotlinUpdatePluginComponent.initComponent(KotlinUpdatePluginComponent.kt:60)
	at com.intellij.openapi.components.impl.ComponentManagerImpl$ComponentConfigComponentAdapter.getComponentInstance(ComponentManagerImpl.java:491)
	at com.intellij.openapi.components.impl.ComponentManagerImpl.createComponents(ComponentManagerImpl.java:120)
	at com.intellij.openapi.application.impl.ApplicationImpl.lambda$createComponents$8(ApplicationImpl.java:466)
	at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$1(CoreProgressManager.java:176)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(CoreProgressManager.java:163)
	at com.intellij.openapi.application.impl.ApplicationImpl.createComponents(ApplicationImpl.java:473)
	at com.intellij.openapi.components.impl.ComponentManagerImpl.init(ComponentManagerImpl.java:104)
	at com.intellij.openapi.application.impl.ApplicationImpl.load(ApplicationImpl.java:425)
	at com.intellij.openapi.application.impl.ApplicationImpl.load(ApplicationImpl.java:411)
	at com.intellij.idea.IdeaApplication.run(IdeaApplication.java:206)
	at com.intellij.idea.MainImpl$1.lambda$null$0(MainImpl.java:49)
	at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:762)
	at java.awt.EventQueue.access$500(EventQueue.java:98)
	at java.awt.EventQueue$3.run(EventQueue.java:715)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:732)
	at com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.java:343)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)
2017-08-16 11:43:59,485 [se-884-b01]   INFO - ij.components.ComponentManager - org.jetbrains.kotlin.idea.versions.KotlinUpdatePluginComponent initialized in 217 ms 
2017-08-16 11:43:59,485 [se-884-b01]   INFO - plication.impl.ApplicationImpl - 88 application components initialized in 3619ms 
2017-08-16 11:43:59,492 [se-884-b01]   INFO - .intellij.idea.IdeaApplication - App initialization took 4378 ms 
2017-08-16 11:44:00,043 [d thread 1]   INFO - ij.components.ComponentManager - com.intellij.openapi.wm.impl.ToolWindowManagerImpl initialized in 19 ms 
2017-08-16 11:44:00,074 [d thread 2]   INFO - .openapi.application.Preloader - Finished preloading com.intellij.openapi.actionSystem.impl.ActionPreloader@2cf2f4ee 
2017-08-16 11:44:00,117 [d thread 1]   INFO - ij.components.ComponentManager - com.intellij.openapi.vcs.changes.ChangesViewManager initialized in 43 ms 
2017-08-16 11:44:00,141 [d thread 1]   INFO - ij.components.ComponentManager - com.intellij.openapi.vcs.changes.ChangeListManagerImpl initialized in 70 ms 
2017-08-16 11:44:00,142 [d thread 1]   INFO - ij.components.ComponentManager - com.intellij.openapi.vcs.changes.VcsDirtyScopeManagerImpl initialized in 70 ms 
2017-08-16 11:44:00,148 [d thread 1]   INFO - ij.components.ComponentManager - com.intellij.codeInsight.daemon.impl.DaemonListeners initialized in 82 ms 
2017-08-16 11:44:00,190 [d thread 1]   INFO - CompilerWorkspaceConfiguration - Available processors: 12 
2017-08-16 11:44:00,347 [d thread 1]   INFO - ij.components.ComponentManager - com.intellij.execution.impl.RunManagerImpl initialized in 147 ms 
2017-08-16 11:44:00,374 [d thread 1]   INFO - ij.components.ComponentManager - com.intellij.openapi.vcs.changes.shelf.ShelvedChangesViewManager initialized in 20 ms 
2017-08-16 11:44:00,474 [d thread 1]   INFO - ij.components.ComponentManager - com.intellij.xdebugger.impl.XDebuggerManagerImpl initialized in 94 ms 
2017-08-16 11:44:00,537 [d thread 1]   INFO - ij.components.ComponentManager - com.intellij.remoteServer.util.importProject.CloudGitRemoteDetector initialized in 36 ms 
2017-08-16 11:44:00,564 [d thread 1]   INFO - ij.components.ComponentManager - com.intellij.tasks.impl.TaskManagerImpl initialized in 24 ms 
2017-08-16 11:44:00,582 [d thread 1]   INFO - ij.components.ComponentManager - com.android.tools.idea.gradle.project.AndroidGradleProjectComponent initialized in 13 ms 
2017-08-16 11:44:00,599 [d thread 3]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/repository2-1.xml 
2017-08-16 11:44:00,720 [d thread 1]   INFO - ij.components.ComponentManager - com.jetbrains.cidr.lang.symbols.symtable.FileSymbolTablesCache initialized in 131 ms 
2017-08-16 11:44:00,746 [d thread 1]   INFO - ellij.project.impl.ProjectImpl - 150 project components initialized in 867 ms 
2017-08-16 11:44:00,791 [d thread 5]   INFO - ij.components.ComponentManager - com.intellij.openapi.roots.impl.ModuleRootManagerComponent initialized in 28 ms 
2017-08-16 11:44:00,865 [d thread 4]   INFO - ij.components.ComponentManager - com.intellij.openapi.roots.impl.ModuleRootManagerComponent initialized in 101 ms 
2017-08-16 11:44:00,885 [d thread 4]   INFO - ij.components.ComponentManager - com.intellij.facet.FacetManagerImpl initialized in 20 ms 
2017-08-16 11:44:00,886 [d thread 1]   INFO - le.impl.ModuleManagerComponent - 2 module(s) loaded in 140 ms 
2017-08-16 11:44:00,888 [d thread 3]   INFO - dea.updater.SdkComponentSource - Downloading file:/home/matti/Tools/android-studio-canary/android-studio/plugins/sdk-updates/offline-repo/offline-repo.xml 
2017-08-16 11:44:00,903 [d thread 2]   INFO - .openapi.application.Preloader - Finished preloading com.intellij.ide.ui.search.SearchableOptionPreloader@277e4f2a 
2017-08-16 11:44:00,946 [d thread 3]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/addons_list-3.xml 
2017-08-16 11:44:01,063 [d thread 3]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/sys-img/android/sys-img2-1.xml 
2017-08-16 11:44:01,131 [d thread 2]   INFO - .openapi.application.Preloader - Finished preloading com.intellij.codeInsight.completion.CompletionPreloader@35da7053 
2017-08-16 11:44:01,291 [d thread 3]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/sys-img/android-wear/sys-img2-1.xml 
2017-08-16 11:44:01,335 [notifier64]   WARN - api.vfs.impl.local.FileWatcher - The current <b>inotify</b>(7) watch limit is too low. <a href="https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit">More details.</a> 
2017-08-16 11:44:01,342 [notifier64]   WARN - pl.local.NativeFileWatcherImpl - Watcher terminated with exit code 3 
2017-08-16 11:44:01,343 [notifier64]   INFO - pl.local.NativeFileWatcherImpl - Starting file watcher: /home/matti/Tools/android-studio-canary/android-studio/bin/fsnotifier64 
2017-08-16 11:44:01,463 [d thread 3]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/sys-img/android-wear-cn/sys-img2-1.xml 
2017-08-16 11:44:01,464 [notifier64]   WARN - api.vfs.impl.local.FileWatcher - The current <b>inotify</b>(7) watch limit is too low. <a href="https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit">More details.</a> 
2017-08-16 11:44:01,472 [notifier64]   WARN - pl.local.NativeFileWatcherImpl - Watcher terminated with exit code 3 
2017-08-16 11:44:01,472 [notifier64]   INFO - pl.local.NativeFileWatcherImpl - Starting file watcher: /home/matti/Tools/android-studio-canary/android-studio/bin/fsnotifier64 
2017-08-16 11:44:01,599 [notifier64]   WARN - api.vfs.impl.local.FileWatcher - The current <b>inotify</b>(7) watch limit is too low. <a href="https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit">More details.</a> 
2017-08-16 11:44:01,608 [notifier64]   WARN - pl.local.NativeFileWatcherImpl - Watcher terminated with exit code 3 
2017-08-16 11:44:01,608 [notifier64]   INFO - pl.local.NativeFileWatcherImpl - Starting file watcher: /home/matti/Tools/android-studio-canary/android-studio/bin/fsnotifier64 
2017-08-16 11:44:01,609 [d thread 3]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/sys-img/android-tv/sys-img2-1.xml 
2017-08-16 11:44:01,750 [notifier64]   WARN - api.vfs.impl.local.FileWatcher - The current <b>inotify</b>(7) watch limit is too low. <a href="https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit">More details.</a> 
2017-08-16 11:44:01,759 [notifier64]   WARN - pl.local.NativeFileWatcherImpl - Watcher terminated with exit code 3 
2017-08-16 11:44:01,759 [notifier64]   INFO - pl.local.NativeFileWatcherImpl - Starting file watcher: /home/matti/Tools/android-studio-canary/android-studio/bin/fsnotifier64 
2017-08-16 11:44:01,800 [d thread 3]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/sys-img/google_apis/sys-img2-1.xml 
2017-08-16 11:44:01,883 [notifier64]   WARN - api.vfs.impl.local.FileWatcher - The current <b>inotify</b>(7) watch limit is too low. <a href="https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit">More details.</a> 
2017-08-16 11:44:01,891 [notifier64]   WARN - pl.local.NativeFileWatcherImpl - Watcher terminated with exit code 3 
2017-08-16 11:44:01,891 [notifier64]   INFO - pl.local.NativeFileWatcherImpl - Starting file watcher: /home/matti/Tools/android-studio-canary/android-studio/bin/fsnotifier64 
2017-08-16 11:44:01,966 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 346ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:01,970 [d thread 3]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/sys-img/google_apis_playstore/sys-img2-1.xml 
2017-08-16 11:44:02,041 [notifier64]   WARN - api.vfs.impl.local.FileWatcher - The current <b>inotify</b>(7) watch limit is too low. <a href="https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit">More details.</a> 
2017-08-16 11:44:02,046 [d thread 2]   INFO -       ScriptTemplatesProviders - [kts] loading script definitions [] using cp:  
2017-08-16 11:44:02,049 [notifier64]   WARN - pl.local.NativeFileWatcherImpl - Watcher terminated with exit code 3 
2017-08-16 11:44:02,049 [notifier64]   INFO - pl.local.NativeFileWatcherImpl - Starting file watcher: /home/matti/Tools/android-studio-canary/android-studio/bin/fsnotifier64 
2017-08-16 11:44:02,049 [d thread 2]   INFO -       ScriptTemplatesProviders - Templates provider KotlinCompilerScriptTemplatesSettings is invalid:  
2017-08-16 11:44:02,049 [d thread 2]   WARN - ript.ScriptDependenciesManager - [kts] Error loading definition from KotlinCompilerScriptTemplatesSettings 
java.lang.ClassNotFoundException: 
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at org.jetbrains.kotlin.script.ScriptTemplateProviderExtensionPointKt.makeScriptDefsFromTemplatesProviders(scriptTemplateProviderExtensionPoint.kt:76)
	at org.jetbrains.kotlin.script.ScriptTemplateProviderExtensionPointKt.makeScriptDefsFromTemplatesProviderExtensions(scriptTemplateProviderExtensionPoint.kt:66)
	at org.jetbrains.kotlin.idea.core.script.ScriptDependenciesManager.reloadScriptDefinitions(ScriptDependenciesManager.kt:57)
	at org.jetbrains.kotlin.idea.core.script.ScriptDependenciesManager.<init>(ScriptDependenciesManager.kt:50)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at org.picocontainer.defaults.InstantiatingComponentAdapter.newInstance(InstantiatingComponentAdapter.java:193)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.doGetComponentInstance(CachingConstructorInjectionComponentAdapter.java:103)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.instantiateGuarded(CachingConstructorInjectionComponentAdapter.java:80)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.getComponentInstance(CachingConstructorInjectionComponentAdapter.java:63)
	at com.intellij.openapi.components.impl.ServiceManagerImpl$MyComponentAdapter.getComponentInstance(ServiceManagerImpl.java:228)
	at com.intellij.util.pico.DefaultPicoContainer.getLocalInstance(DefaultPicoContainer.java:239)
	at com.intellij.util.pico.DefaultPicoContainer.getComponentInstance(DefaultPicoContainer.java:206)
	at com.intellij.openapi.components.ServiceManager.doGetService(ServiceManager.java:48)
	at com.intellij.openapi.components.ServiceManager.getService(ServiceManager.java:42)
	at org.jetbrains.kotlin.idea.core.script.ScriptDependenciesManager$Companion.getInstance(ScriptDependenciesManager.kt:69)
	at org.jetbrains.kotlin.idea.core.script.dependencies.KotlinScriptDependenciesIndexableSetContributor.getAdditionalProjectRootsToIndex(KotlinScriptDependenciesIndexableSetContributor.kt:27)
	at com.intellij.util.indexing.IndexableSetContributor.getProjectRootsToIndex(IndexableSetContributor.java:38)
	at com.intellij.util.indexing.FileBasedIndexScanRunnableCollectorImpl.collectScanRootRunnables(FileBasedIndexScanRunnableCollectorImpl.java:84)
	at com.intellij.util.indexing.FileBasedIndexImpl.collectScanRootRunnables(FileBasedIndexImpl.java:2218)
	at com.intellij.util.indexing.FileBasedIndexImpl.iterateIndexableFilesConcurrently(FileBasedIndexImpl.java:2205)
	at com.intellij.util.indexing.UnindexedFilesUpdater.updateUnindexedFiles(UnindexedFilesUpdater.java:75)
	at com.intellij.util.indexing.UnindexedFilesUpdater.performInDumbMode(UnindexedFilesUpdater.java:112)
	at com.intellij.openapi.project.DumbServiceImpl.lambda$runSingleTask$9(DumbServiceImpl.java:479)
	at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$1(CoreProgressManager.java:176)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(CoreProgressManager.java:163)
	at com.intellij.openapi.project.DumbServiceImpl.runSingleTask(DumbServiceImpl.java:472)
	at com.intellij.openapi.project.DumbServiceImpl.runBackgroundProcess(DumbServiceImpl.java:456)
	at com.intellij.openapi.project.DumbServiceImpl.access$100(DumbServiceImpl.java:63)
	at com.intellij.openapi.project.DumbServiceImpl$3.run(DumbServiceImpl.java:417)
	at com.intellij.openapi.progress.impl.CoreProgressManager$TaskRunnable.run(CoreProgressManager.java:726)
	at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$1(CoreProgressManager.java:176)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(CoreProgressManager.java:163)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl$1.run(ProgressManagerImpl.java:137)
	at com.intellij.openapi.application.impl.ApplicationImpl$2.run(ApplicationImpl.java:334)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
2017-08-16 11:44:02,091 [d thread 2]   INFO - s.plugins.gradle.GradleManager - Instructing gradle to use java from /home/matti/Tools/android-studio-canary/android-studio/jre 
2017-08-16 11:44:02,093 [d thread 2]   INFO -       ScriptTemplatesProviders - [kts] loading script definitions [org.gradle.kotlin.dsl.KotlinBuildScript] using cp: /home/matti/.gradle/wrapper/dists/gradle-4.1-rc-1-all/936kh1brdchce6fvd2c1o8t8x/gradle-4.1-rc-1/lib/gradle-kotlin-dsl-compiler-plugin-0.10.3.jar:/home/matti/.gradle/wrapper/dists/gradle-4.1-rc-1-all/936kh1brdchce6fvd2c1o8t8x/gradle-4.1-rc-1/lib/gradle-kotlin-dsl-0.10.3.jar:/home/matti/.gradle/wrapper/dists/gradle-4.1-rc-1-all/936kh1brdchce6fvd2c1o8t8x/gradle-4.1-rc-1/lib/gradle-kotlin-dsl-tooling-builders-0.10.3.jar:/home/matti/.gradle/wrapper/dists/gradle-4.1-rc-1-all/936kh1brdchce6fvd2c1o8t8x/gradle-4.1-rc-1/lib/gradle-kotlin-dsl-tooling-models-0.10.3.jar:/home/matti/.gradle/wrapper/dists/gradle-4.1-rc-1-all/936kh1brdchce6fvd2c1o8t8x/gradle-4.1-rc-1/lib/gradle-core-4.1.jar:/home/matti/.gradle/wrapper/dists/gradle-4.1-rc-1-all/936kh1brdchce6fvd2c1o8t8x/gradle-4.1-rc-1/lib/kotlin-compiler-embeddable-1.1.3-2.jar 
2017-08-16 11:44:02,118 [d thread 2]   INFO - s.plugins.gradle.GradleManager - Instructing gradle to use java from /home/matti/Tools/android-studio-canary/android-studio/jre 
2017-08-16 11:44:02,119 [d thread 2]   INFO -       ScriptTemplatesProviders - [kts] loading script definitions [org.gradle.script.lang.kotlin.KotlinBuildScript] using cp: /home/matti/.gradle/wrapper/dists/gradle-4.1-rc-1-all/936kh1brdchce6fvd2c1o8t8x/gradle-4.1-rc-1/lib/gradle-core-4.1.jar 
2017-08-16 11:44:02,119 [d thread 2]   INFO -       ScriptTemplatesProviders - Templates provider Gradle Script Kotlin is invalid: org.gradle.script.lang.kotlin.KotlinBuildScript 
2017-08-16 11:44:02,119 [d thread 2]   WARN - ript.ScriptDependenciesManager - [kts] Error loading definition from Gradle Script Kotlin 
java.lang.ClassNotFoundException: org.gradle.script.lang.kotlin.KotlinBuildScript
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at org.jetbrains.kotlin.script.ScriptTemplateProviderExtensionPointKt.makeScriptDefsFromTemplatesProviders(scriptTemplateProviderExtensionPoint.kt:76)
	at org.jetbrains.kotlin.script.ScriptTemplateProviderExtensionPointKt.makeScriptDefsFromTemplatesProviderExtensions(scriptTemplateProviderExtensionPoint.kt:66)
	at org.jetbrains.kotlin.idea.core.script.ScriptDependenciesManager.reloadScriptDefinitions(ScriptDependenciesManager.kt:57)
	at org.jetbrains.kotlin.idea.core.script.ScriptDependenciesManager.<init>(ScriptDependenciesManager.kt:50)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at org.picocontainer.defaults.InstantiatingComponentAdapter.newInstance(InstantiatingComponentAdapter.java:193)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.doGetComponentInstance(CachingConstructorInjectionComponentAdapter.java:103)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.instantiateGuarded(CachingConstructorInjectionComponentAdapter.java:80)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.getComponentInstance(CachingConstructorInjectionComponentAdapter.java:63)
	at com.intellij.openapi.components.impl.ServiceManagerImpl$MyComponentAdapter.getComponentInstance(ServiceManagerImpl.java:228)
	at com.intellij.util.pico.DefaultPicoContainer.getLocalInstance(DefaultPicoContainer.java:239)
	at com.intellij.util.pico.DefaultPicoContainer.getComponentInstance(DefaultPicoContainer.java:206)
	at com.intellij.openapi.components.ServiceManager.doGetService(ServiceManager.java:48)
	at com.intellij.openapi.components.ServiceManager.getService(ServiceManager.java:42)
	at org.jetbrains.kotlin.idea.core.script.ScriptDependenciesManager$Companion.getInstance(ScriptDependenciesManager.kt:69)
	at org.jetbrains.kotlin.idea.core.script.dependencies.KotlinScriptDependenciesIndexableSetContributor.getAdditionalProjectRootsToIndex(KotlinScriptDependenciesIndexableSetContributor.kt:27)
	at com.intellij.util.indexing.IndexableSetContributor.getProjectRootsToIndex(IndexableSetContributor.java:38)
	at com.intellij.util.indexing.FileBasedIndexScanRunnableCollectorImpl.collectScanRootRunnables(FileBasedIndexScanRunnableCollectorImpl.java:84)
	at com.intellij.util.indexing.FileBasedIndexImpl.collectScanRootRunnables(FileBasedIndexImpl.java:2218)
	at com.intellij.util.indexing.FileBasedIndexImpl.iterateIndexableFilesConcurrently(FileBasedIndexImpl.java:2205)
	at com.intellij.util.indexing.UnindexedFilesUpdater.updateUnindexedFiles(UnindexedFilesUpdater.java:75)
	at com.intellij.util.indexing.UnindexedFilesUpdater.performInDumbMode(UnindexedFilesUpdater.java:112)
	at com.intellij.openapi.project.DumbServiceImpl.lambda$runSingleTask$9(DumbServiceImpl.java:479)
	at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$1(CoreProgressManager.java:176)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(CoreProgressManager.java:163)
	at com.intellij.openapi.project.DumbServiceImpl.runSingleTask(DumbServiceImpl.java:472)
	at com.intellij.openapi.project.DumbServiceImpl.runBackgroundProcess(DumbServiceImpl.java:456)
	at com.intellij.openapi.project.DumbServiceImpl.access$100(DumbServiceImpl.java:63)
	at com.intellij.openapi.project.DumbServiceImpl$3.run(DumbServiceImpl.java:417)
	at com.intellij.openapi.progress.impl.CoreProgressManager$TaskRunnable.run(CoreProgressManager.java:726)
	at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$1(CoreProgressManager.java:176)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(CoreProgressManager.java:163)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl$1.run(ProgressManagerImpl.java:137)
	at com.intellij.openapi.application.impl.ApplicationImpl$2.run(ApplicationImpl.java:334)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
2017-08-16 11:44:02,120 [d thread 2]   INFO -       ScriptTemplatesProviders - [kts] loading script definitions [kotlin.script.templates.standard.ScriptTemplateWithArgs] using cp:  
2017-08-16 11:44:02,124 [d thread 3]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/addon2-1.xml 
2017-08-16 11:44:02,177 [notifier64]   WARN - api.vfs.impl.local.FileWatcher - The current <b>inotify</b>(7) watch limit is too low. <a href="https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit">More details.</a> 
2017-08-16 11:44:02,184 [notifier64]   WARN - pl.local.NativeFileWatcherImpl - Watcher terminated with exit code 3 
2017-08-16 11:44:02,184 [notifier64]   INFO - pl.local.NativeFileWatcherImpl - Starting file watcher: /home/matti/Tools/android-studio-canary/android-studio/bin/fsnotifier64 
2017-08-16 11:44:02,337 [notifier64]   WARN - api.vfs.impl.local.FileWatcher - The current <b>inotify</b>(7) watch limit is too low. <a href="https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit">More details.</a> 
2017-08-16 11:44:02,348 [notifier64]   WARN - pl.local.NativeFileWatcherImpl - Watcher terminated with exit code 3 
2017-08-16 11:44:02,348 [notifier64]   INFO - pl.local.NativeFileWatcherImpl - Starting file watcher: /home/matti/Tools/android-studio-canary/android-studio/bin/fsnotifier64 
2017-08-16 11:44:02,362 [d thread 3]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/glass/addon2-1.xml 
2017-08-16 11:44:02,498 [notifier64]   WARN - api.vfs.impl.local.FileWatcher - The current <b>inotify</b>(7) watch limit is too low. <a href="https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit">More details.</a> 
2017-08-16 11:44:02,509 [notifier64]   WARN - pl.local.NativeFileWatcherImpl - Watcher terminated with exit code 3 
2017-08-16 11:44:02,509 [notifier64]   INFO - pl.local.NativeFileWatcherImpl - Starting file watcher: /home/matti/Tools/android-studio-canary/android-studio/bin/fsnotifier64 
2017-08-16 11:44:02,542 [d thread 3]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/extras/intel/addon2-1.xml 
2017-08-16 11:44:02,658 [notifier64]   WARN - api.vfs.impl.local.FileWatcher - The current <b>inotify</b>(7) watch limit is too low. <a href="https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit">More details.</a> 
2017-08-16 11:44:02,666 [notifier64]   WARN - pl.local.NativeFileWatcherImpl - Watcher terminated with exit code 3 
2017-08-16 11:44:02,666 [notifier64]   INFO - pl.local.NativeFileWatcherImpl - Starting file watcher: /home/matti/Tools/android-studio-canary/android-studio/bin/fsnotifier64 
2017-08-16 11:44:02,709 [d thread 3]   WARN - dea.updater.SdkComponentSource - File /home/matti/.android/repositories.cfg could not be loaded. 
2017-08-16 11:44:02,823 [notifier64]   WARN - api.vfs.impl.local.FileWatcher - The current <b>inotify</b>(7) watch limit is too low. <a href="https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit">More details.</a> 
2017-08-16 11:44:02,832 [notifier64]   WARN - pl.local.NativeFileWatcherImpl - Watcher terminated with exit code 3 
2017-08-16 11:44:02,832 [notifier64]   WARN - api.vfs.impl.local.FileWatcher - File watcher failed to start 
2017-08-16 11:44:03,289 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 1267ms; general responsiveness: ok; EDT responsiveness: 2/2 sluggish 
2017-08-16 11:44:03,299 [d thread 2]   INFO - indexing.UnindexedFilesUpdater - Unindexed files update started: 36808 files to update 
2017-08-16 11:44:03,502 [d thread 1]   INFO - tartup.impl.StartupManagerImpl - OpenFilesActivity run in 1949 
2017-08-16 11:44:04,420 [se-884-b01]   INFO - tartup.impl.StartupManagerImpl - /home/matti/Development/dawanda/AndroidNative/.idea case-sensitivity: expected=true actual=true 
2017-08-16 11:44:04,525 [se-884-b01]   INFO - il.indexing.FileBasedIndexImpl - scheduleIndexRebuild, reason: checkRebuild 
2017-08-16 11:44:04,758 [se-884-b01]   INFO - tor.impl.FileEditorManagerImpl - Project opening took 4913 ms 
2017-08-16 11:44:04,797 [se-884-b01]   INFO - il.indexing.FileBasedIndexImpl - scheduleIndexRebuild, reason: checkRebuild 
2017-08-16 11:44:04,833 [se-884-b01]   INFO - il.indexing.FileBasedIndexImpl - scheduleIndexRebuild, reason: checkRebuild 
2017-08-16 11:44:04,907 [se-884-b01]   INFO - il.indexing.FileBasedIndexImpl - scheduleIndexRebuild, reason: checkRebuild 
2017-08-16 11:44:04,947 [se-884-b01]   INFO - il.indexing.FileBasedIndexImpl - scheduleIndexRebuild, reason: checkRebuild 
2017-08-16 11:44:05,058 [se-884-b01]   INFO - il.indexing.FileBasedIndexImpl - scheduleIndexRebuild, reason: checkRebuild 
2017-08-16 11:44:05,263 [se-884-b01]   INFO - il.indexing.FileBasedIndexImpl - scheduleIndexRebuild, reason: checkRebuild 
2017-08-16 11:44:07,616 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Unindexed files update took 4317ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:07,628 [d thread 2]   INFO -       #com.jetbrains.cidr.lang - Clearing symbols finished in 0 s. 
2017-08-16 11:44:07,639 [d thread 2]   INFO -       #com.jetbrains.cidr.lang - Loading symbols finished in 0 s. 
2017-08-16 11:44:07,644 [d thread 2]   INFO -       #com.jetbrains.cidr.lang - Building symbols finished in 0 s. 
2017-08-16 11:44:07,647 [d thread 2]   INFO -       #com.jetbrains.cidr.lang - Saving symbols finished in 0 s. 
2017-08-16 11:44:07,655 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 6ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:07,885 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 230ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:07,889 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 4ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:07,904 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 15ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:07,912 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 7ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:07,926 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 14ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:07,932 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 6ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:07,942 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 10ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:07,946 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 3ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:07,954 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 8ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:07,958 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 3ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:07,967 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 9ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:07,971 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 4ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:07,979 [d thread 2]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 8ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:08,288 [se-884-b01]   INFO - tartup.impl.StartupManagerImpl - ExternalSystemStartupActivity run in 271 
2017-08-16 11:44:08,384 [se-884-b01]   INFO - e.project.sync.GradleSyncState - Started sync with Gradle for project 'AndroidNative'. 
2017-08-16 11:44:08,410 [se-884-b01]   INFO - e.project.sync.GradleSyncState - Started setup of project 'AndroidNative'. 
2017-08-16 11:44:09,445 [se-884-b01]   INFO - pl.ProjectRootManagerComponent - project roots have changed 
2017-08-16 11:44:09,477 [d thread 6]   INFO - etup.post.PluginVersionUpgrade - Gradle model version: 3.0.0-alpha9, recommended version for IDE: 3.0.0-alpha9 
2017-08-16 11:44:09,483 [d thread 6]   INFO - e.project.sync.GradleSyncState - Gradle sync finished in 1s 99ms (from cached state) 
2017-08-16 11:44:09,612 [d thread 6]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 21ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:09,629 [d thread 6]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 16ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:44:09,930 [d thread 9]   INFO -       #com.jetbrains.cidr.lang - Clearing symbols finished in 0 s. 
2017-08-16 11:44:09,937 [d thread 9]   INFO -       #com.jetbrains.cidr.lang - Loading symbols finished in 0 s. 
2017-08-16 11:44:09,939 [d thread 9]   INFO -       #com.jetbrains.cidr.lang - Building symbols finished in 0 s. 
2017-08-16 11:44:09,939 [d thread 9]   INFO -       #com.jetbrains.cidr.lang - Saving symbols finished in 0 s. 
2017-08-16 11:44:40,861 [d thread 8]   INFO - tools.idea.ddms.adb.AdbService - Initializing adb using: /home/matti/Android/Sdk/platform-tools/adb, client support = true 
2017-08-16 11:44:46,091 [d thread 8]   INFO - tools.idea.ddms.adb.AdbService - Successfully connected to adb 
2017-08-16 11:44:46,092 [se-884-b01]   INFO - ditor.DeployTargetPickerDialog - Successfully obtained debug bridge 
2017-08-16 11:47:14,317 [st Monitor]   WARN -            #com.android.ddmlib - Adb connection Error:EOF 
2017-08-16 11:47:14,318 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 1 
2017-08-16 11:47:15,318 [st Monitor]   WARN -            #com.android.ddmlib - Connection attempts: 2 
2017-08-16 11:47:25,489 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8600 for client with pid 8449 
2017-08-16 11:47:25,503 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8601 for client with pid 11652 
2017-08-16 11:47:25,514 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8602 for client with pid 11525 
2017-08-16 11:47:25,524 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8603 for client with pid 4231 
2017-08-16 11:47:25,535 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8604 for client with pid 14728 
2017-08-16 11:47:25,546 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8605 for client with pid 6025 
2017-08-16 11:47:25,557 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8606 for client with pid 23565 
2017-08-16 11:47:25,567 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8607 for client with pid 12045 
2017-08-16 11:47:25,578 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8608 for client with pid 11277 
2017-08-16 11:47:25,589 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8609 for client with pid 5902 
2017-08-16 11:47:25,600 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8610 for client with pid 1039 
2017-08-16 11:47:25,610 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8611 for client with pid 4751 
2017-08-16 11:47:25,621 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8612 for client with pid 11922 
2017-08-16 11:47:25,632 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8613 for client with pid 30483 
2017-08-16 11:47:25,643 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8614 for client with pid 5909 
2017-08-16 11:47:25,648 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8615 for client with pid 4247 
2017-08-16 11:47:25,659 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8616 for client with pid 7319 
2017-08-16 11:47:25,669 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8617 for client with pid 7450 
2017-08-16 11:47:25,675 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8618 for client with pid 11293 
2017-08-16 11:47:25,685 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8619 for client with pid 19359 
2017-08-16 11:47:25,696 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8620 for client with pid 15649 
2017-08-16 11:47:25,707 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8621 for client with pid 4643 
2017-08-16 11:47:25,717 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8622 for client with pid 13091 
2017-08-16 11:47:25,728 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8623 for client with pid 1321 
2017-08-16 11:47:25,739 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8624 for client with pid 7083 
2017-08-16 11:47:25,754 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8625 for client with pid 2220 
2017-08-16 11:47:25,765 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8626 for client with pid 16428 
2017-08-16 11:47:25,781 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8627 for client with pid 23343 
2017-08-16 11:47:25,797 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8628 for client with pid 6959 
2017-08-16 11:47:25,813 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8629 for client with pid 8243 
2017-08-16 11:47:25,823 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8630 for client with pid 20917 
2017-08-16 11:47:25,834 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8631 for client with pid 5944 
2017-08-16 11:47:25,845 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8632 for client with pid 697 
2017-08-16 11:47:25,855 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8633 for client with pid 6074 
2017-08-16 11:47:25,866 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8634 for client with pid 11450 
2017-08-16 11:47:25,876 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8635 for client with pid 5053 
2017-08-16 11:47:25,887 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8636 for client with pid 5951 
2017-08-16 11:47:25,898 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8637 for client with pid 16323 
2017-08-16 11:47:25,908 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8638 for client with pid 16197 
2017-08-16 11:47:25,919 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8639 for client with pid 21191 
2017-08-16 11:47:25,930 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8640 for client with pid 16457 
2017-08-16 11:47:25,941 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8641 for client with pid 10315 
2017-08-16 11:47:25,951 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8642 for client with pid 22992 
2017-08-16 11:47:25,962 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8643 for client with pid 5972 
2017-08-16 11:47:25,973 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8644 for client with pid 8533 
2017-08-16 11:47:25,984 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8645 for client with pid 23766 
2017-08-16 11:47:25,994 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8646 for client with pid 6359 
2017-08-16 11:47:26,005 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8647 for client with pid 16344 
2017-08-16 11:47:26,016 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8648 for client with pid 6105 
2017-08-16 11:47:26,026 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8649 for client with pid 16602 
2017-08-16 11:47:26,037 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8650 for client with pid 5724 
2017-08-16 11:47:26,063 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8651 for client with pid 11744 
2017-08-16 11:47:26,074 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8652 for client with pid 16359 
2017-08-16 11:47:26,090 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8653 for client with pid 5864 
2017-08-16 11:47:26,101 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8654 for client with pid 15978 
2017-08-16 11:47:26,112 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8655 for client with pid 16875 
2017-08-16 11:47:26,123 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8656 for client with pid 21232 
2017-08-16 11:47:26,133 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8657 for client with pid 12017 
2017-08-16 11:47:26,144 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8658 for client with pid 22514 
2017-08-16 11:47:26,155 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8659 for client with pid 7796 
2017-08-16 11:47:26,166 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8660 for client with pid 27385 
2017-08-16 11:47:32,825 [d thread 8]   INFO -                    #InstantRun - Package com.dawanda.internal.shopping was not detected on the device. 
2017-08-16 11:47:33,921 [d thread 8]   INFO - ools.idea.fd.InstantRunBuilder - BuildCause: APP_NOT_INSTALLED, BuildMode: FULL 
2017-08-16 11:47:33,926 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - About to execute Gradle tasks: [:buyer:assembleInternalDebug] 
2017-08-16 11:47:33,940 [ thread 16]   INFO - s.plugins.gradle.GradleManager - Instructing gradle to use java from /home/matti/Tools/android-studio-canary/android-studio/jre 
2017-08-16 11:47:34,031 [ thread 16]   INFO - oject.common.GradleInitScripts - init script file sync.local.repo contents "allprojects {\n  buildscript {\n    repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n    }\n  }\n  repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n  }\n}\n" 
2017-08-16 11:47:34,031 [ thread 16]   INFO - ild.invoker.GradleBuildInvoker - Build command line options: [--configure-on-demand, -Pandroid.injected.invoked.from.ide=true, -Pandroid.injected.build.api=25, -Pandroid.injected.build.density=xxhdpi, -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi, -Pandroid.injected.restrict.variant.name=internalDebug, -Pandroid.injected.restrict.variant.project=:buyer, -Pandroid.optional.compilation=INSTANT_DEV,FULL_APK, -Pandroid.injected.coldswap.mode=MULTIAPK, --no-build-cache, --init-script, /tmp/sync.local.repo.gradle] 
2017-08-16 11:47:34,036 [ thread 16]   INFO - xecution.GradleExecutionHelper - Passing command-line args to Gradle Tooling API: --configure-on-demand -Pandroid.injected.invoked.from.ide=true -Pandroid.injected.build.api=25 -Pandroid.injected.build.density=xxhdpi -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi -Pandroid.injected.restrict.variant.name=internalDebug -Pandroid.injected.restrict.variant.project=:buyer -Pandroid.optional.compilation=INSTANT_DEV,FULL_APK -Pandroid.injected.coldswap.mode=MULTIAPK --no-build-cache --init-script /tmp/sync.local.repo.gradle 
2017-08-16 11:47:36,729 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - Gradle build finished in 2s 741ms 
2017-08-16 11:47:36,749 [se-884-b01]   INFO - pl.ProjectRootManagerComponent - project roots have changed 
2017-08-16 11:47:36,762 [d thread 8]   INFO - a.gradle.run.MakeBeforeRunTask - Gradle invocation complete, success = true 
2017-08-16 11:47:36,766 [ thread 19]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 4ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:47:36,782 [ thread 19]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 16ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 11:47:36,862 [ thread 16]   INFO -                    #InstantRun - $ adb install-multiple -r -t /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_8.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_7.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_9.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/dep/dependencies.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_5.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_4.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_3.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_6.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_0.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_1.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_2.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/outputs/apk/internal/debug/buyer-internal-debug.apk  
2017-08-16 11:47:52,470 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8661 for client with pid 17478 
2017-08-16 11:47:54,453 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8662 for client with pid 17515 
2017-08-16 11:47:55,465 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8607 for client with pid 17515 
2017-08-16 11:47:55,476 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '12045': closed 
2017-08-16 11:47:55,492 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '11922': closed 
2017-08-16 11:47:55,502 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8663 for client with pid 17556 
2017-08-16 11:47:55,518 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '12045': closed 
2017-08-16 11:47:55,544 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '12045': closed 
2017-08-16 11:47:55,554 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8666 for client with pid 17592 
2017-08-16 11:47:55,565 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '12045': closed 
2017-08-16 11:47:55,581 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8668 for client with pid 17618 
2017-08-16 11:47:55,675 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8669 for client with pid 17645 
2017-08-16 11:47:55,676 [ thread 16]   INFO - idea.run.AndroidProcessHandler - Adding device oneplus-one_a2003-192.168.51.17:5555 to monitor for launched app: com.dawanda.internal.shopping 
2017-08-16 11:47:56,940 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 11:48:18,826 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 11:48:23,044 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8620 for client with pid 17850 
2017-08-16 11:48:24,645 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8637 for client with pid 17881 
2017-08-16 11:48:28,029 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 11:49:18,678 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8606 for client with pid 18065 
2017-08-16 11:49:20,888 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8638 for client with pid 18087 
2017-08-16 11:49:21,919 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8638 for client with pid 18087 
2017-08-16 11:49:21,929 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8640 for client with pid 18128 
2017-08-16 11:49:25,041 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8644 for client with pid 18162 
2017-08-16 11:49:25,200 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8649 for client with pid 18177 
2017-08-16 11:49:25,377 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 11:49:25,402 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 11:49:32,085 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8651 for client with pid 18379 
2017-08-16 11:49:32,464 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 11:49:34,325 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 11:50:30,601 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8647 for client with pid 18544 
2017-08-16 11:50:30,998 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 11:50:30,998 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 11:53:10,745 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8637 for client with pid 18835 
2017-08-16 11:53:11,756 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8637 for client with pid 18835 
2017-08-16 11:54:09,110 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8607 for client with pid 18929 
2017-08-16 11:54:10,131 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8607 for client with pid 18929 
2017-08-16 11:54:10,484 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8652 for client with pid 18945 
2017-08-16 11:54:11,503 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8652 for client with pid 18945 
2017-08-16 11:54:11,519 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8654 for client with pid 18971 
2017-08-16 11:55:18,332 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8657 for client with pid 19129 
2017-08-16 11:55:19,351 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8657 for client with pid 19129 
2017-08-16 11:55:19,367 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '17556': closed 
2017-08-16 11:55:19,383 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8663 for client with pid 19144 
2017-08-16 11:55:19,980 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 11:55:27,172 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 12:00:00,469 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8626 for client with pid 19472 
2017-08-16 12:00:01,493 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8626 for client with pid 19472 
2017-08-16 12:01:00,453 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8638 for client with pid 19577 
2017-08-16 12:01:12,838 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8606 for client with pid 19663 
2017-08-16 12:01:13,855 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8606 for client with pid 19663 
2017-08-16 12:06:06,735 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8640 for client with pid 20414 
2017-08-16 12:09:36,867 [ pool 5/12]   INFO - attrs.AttributeDefinitionsImpl - Found tag with unknown parent: AndroidManifest.AndroidManifestCompatibleScreens 
2017-08-16 12:09:36,867 [ pool 5/12]   INFO - attrs.AttributeDefinitionsImpl - Found tag with unknown parent: AndroidManifest.AndroidManifestSupportsInput 
2017-08-16 12:13:00,307 [ thread 27]   INFO -                    #InstantRun - Package com.dawanda.internal.shopping was not detected on the device. 
2017-08-16 12:13:01,357 [ thread 27]   INFO - ools.idea.fd.InstantRunBuilder - BuildCause: APP_NOT_INSTALLED, BuildMode: FULL 
2017-08-16 12:13:01,358 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - About to execute Gradle tasks: [:buyer:assembleInternalDebug] 
2017-08-16 12:13:01,439 [ thread 30]   INFO - s.plugins.gradle.GradleManager - Instructing gradle to use java from /home/matti/Tools/android-studio-canary/android-studio/jre 
2017-08-16 12:13:01,465 [ thread 30]   INFO - oject.common.GradleInitScripts - init script file sync.local.repo contents "allprojects {\n  buildscript {\n    repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n    }\n  }\n  repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n  }\n}\n" 
2017-08-16 12:13:01,466 [ thread 30]   INFO - ild.invoker.GradleBuildInvoker - Build command line options: [--configure-on-demand, -Pandroid.injected.invoked.from.ide=true, -Pandroid.injected.build.api=25, -Pandroid.injected.build.density=xxhdpi, -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi, -Pandroid.injected.restrict.variant.name=internalDebug, -Pandroid.injected.restrict.variant.project=:buyer, -Pandroid.optional.compilation=INSTANT_DEV,FULL_APK, -Pandroid.injected.coldswap.mode=MULTIAPK, --no-build-cache, --init-script, /tmp/sync.local.repo1.gradle] 
2017-08-16 12:13:01,466 [ thread 30]   INFO - xecution.GradleExecutionHelper - Passing command-line args to Gradle Tooling API: --configure-on-demand -Pandroid.injected.invoked.from.ide=true -Pandroid.injected.build.api=25 -Pandroid.injected.build.density=xxhdpi -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi -Pandroid.injected.restrict.variant.name=internalDebug -Pandroid.injected.restrict.variant.project=:buyer -Pandroid.optional.compilation=INSTANT_DEV,FULL_APK -Pandroid.injected.coldswap.mode=MULTIAPK --no-build-cache --init-script /tmp/sync.local.repo1.gradle 
2017-08-16 12:13:14,093 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - Gradle build finished in 12s 652ms 
2017-08-16 12:13:14,136 [se-884-b01]   INFO - pl.ProjectRootManagerComponent - project roots have changed 
2017-08-16 12:13:14,140 [ thread 27]   INFO - a.gradle.run.MakeBeforeRunTask - Gradle invocation complete, success = true 
2017-08-16 12:13:14,257 [ thread 33]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 56ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 12:13:14,290 [ thread 33]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 32ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 12:13:14,290 [ thread 33]   INFO - indexing.UnindexedFilesUpdater - Unindexed files update started: 3 files to update 
2017-08-16 12:13:14,305 [se-884-b01]   WARN - tectAndAdjustIndentOptionsTask - Indent detection is too long for: ShopDetails.java 
2017-08-16 12:13:14,305 [se-884-b01]   WARN - tectAndAdjustIndentOptionsTask - Indent detection is too long for: PlayAnalytics.java 
2017-08-16 12:13:14,305 [se-884-b01]   WARN - tectAndAdjustIndentOptionsTask - Indent detection is too long for: AnalyticsInfo.java 
2017-08-16 12:13:14,305 [se-884-b01]   WARN - tectAndAdjustIndentOptionsTask - Indent detection is too long for: FireBaseShortLinkParams.java 
2017-08-16 12:13:14,305 [se-884-b01]   WARN - tectAndAdjustIndentOptionsTask - Indent detection is too long for: GACampaignHelper.java 
2017-08-16 12:13:14,478 [ thread 33]   INFO - .diagnostic.PerformanceWatcher - Unindexed files update took 188ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 12:13:14,866 [ thread 30]   INFO -                    #InstantRun - $ adb install-multiple -r -t /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/dep/dependencies.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_3.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_0.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_8.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_5.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_6.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_9.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_1.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_2.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_7.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_4.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/outputs/apk/internal/debug/buyer-internal-debug.apk  
2017-08-16 12:13:39,598 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8641 for client with pid 21695 
2017-08-16 12:13:41,374 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8666 for client with pid 21734 
2017-08-16 12:13:41,776 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8668 for client with pid 21779 
2017-08-16 12:13:42,294 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8618 for client with pid 21814 
2017-08-16 12:13:42,414 [ thread 30]   INFO - idea.run.AndroidProcessHandler - Adding device oneplus-one_a2003-192.168.51.17:5555 to monitor for launched app: com.dawanda.internal.shopping 
2017-08-16 12:13:43,310 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8618 for client with pid 21814 
2017-08-16 12:13:43,320 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '18945': closed 
2017-08-16 12:13:43,336 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '18835': closed 
2017-08-16 12:13:43,351 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8669 for client with pid 21837 
2017-08-16 12:13:43,362 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '18945': closed 
2017-08-16 12:13:43,372 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '18835': closed 
2017-08-16 12:13:43,383 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8672 for client with pid 21855 
2017-08-16 12:13:43,394 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '18835': closed 
2017-08-16 12:13:43,630 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 12:13:43,630 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 12:13:54,155 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8674 for client with pid 22032 
2017-08-16 12:13:55,174 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8663 for client with pid 22032 
2017-08-16 12:13:55,185 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8674 for client with pid 22053 
2017-08-16 12:13:55,200 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '19144': closed 
2017-08-16 12:13:59,346 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8657 for client with pid 22143 
2017-08-16 12:13:59,685 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8676 for client with pid 22161 
2017-08-16 12:14:00,703 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8626 for client with pid 22161 
2017-08-16 12:14:00,724 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '19577': closed 
2017-08-16 12:14:02,782 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 12:14:02,783 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 12:14:06,981 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 12:14:06,981 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 12:14:07,836 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 12:14:07,836 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 12:14:14,549 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 12:14:14,549 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 12:15:00,451 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8606 for client with pid 22364 
2017-08-16 12:15:01,473 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8606 for client with pid 22364 
2017-08-16 12:15:57,113 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8620 for client with pid 22463 
2017-08-16 12:19:31,048 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8654 for client with pid 22660 
2017-08-16 12:19:31,426 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8676 for client with pid 22684 
2017-08-16 12:38:50,046 [nt Monitor]   WARN -            #com.android.ddmlib - Failed to connect to client '22865': EOF 
2017-08-16 13:52:19,753 [ thread 49]   INFO - .diagnostic.PerformanceWatcher - Find Usages took 61ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 13:54:46,388 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8600 for client with pid 8449 
2017-08-16 13:54:46,398 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8601 for client with pid 18177 
2017-08-16 13:54:46,409 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8602 for client with pid 11652 
2017-08-16 13:54:46,420 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8603 for client with pid 11525 
2017-08-16 13:54:46,430 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8604 for client with pid 23173 
2017-08-16 13:54:46,441 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8605 for client with pid 4231 
2017-08-16 13:54:46,447 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8606 for client with pid 14728 
2017-08-16 13:54:46,462 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8608 for client with pid 6025 
2017-08-16 13:54:46,473 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8609 for client with pid 24843 
2017-08-16 13:54:46,483 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8610 for client with pid 11277 
2017-08-16 13:54:46,494 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8611 for client with pid 5902 
2017-08-16 13:54:46,505 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8613 for client with pid 1039 
2017-08-16 13:54:46,515 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8614 for client with pid 4751 
2017-08-16 13:54:46,526 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8615 for client with pid 31120 
2017-08-16 13:54:46,537 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8616 for client with pid 30483 
2017-08-16 13:54:46,547 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8617 for client with pid 5909 
2017-08-16 13:54:46,558 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8618 for client with pid 4247 
2017-08-16 13:54:46,569 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8619 for client with pid 7319 
2017-08-16 13:54:46,580 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8620 for client with pid 7450 
2017-08-16 13:54:46,590 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8621 for client with pid 28955 
2017-08-16 13:54:46,601 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8622 for client with pid 19359 
2017-08-16 13:54:46,612 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8623 for client with pid 4643 
2017-08-16 13:54:46,622 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8624 for client with pid 13091 
2017-08-16 13:54:46,633 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8625 for client with pid 31011 
2017-08-16 13:54:46,643 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8626 for client with pid 24868 
2017-08-16 13:54:46,654 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8627 for client with pid 1321 
2017-08-16 13:54:46,664 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8628 for client with pid 7083 
2017-08-16 13:54:46,675 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8629 for client with pid 6959 
2017-08-16 13:54:46,691 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8630 for client with pid 29103 
2017-08-16 13:54:46,701 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8631 for client with pid 8243 
2017-08-16 13:54:46,712 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8632 for client with pid 30900 
2017-08-16 13:54:46,722 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8633 for client with pid 20917 
2017-08-16 13:54:46,733 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8634 for client with pid 28599 
2017-08-16 13:54:46,743 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8635 for client with pid 5944 
2017-08-16 13:54:46,759 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8636 for client with pid 697 
2017-08-16 13:54:46,769 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8639 for client with pid 26681 
2017-08-16 13:54:46,780 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8640 for client with pid 6074 
2017-08-16 13:54:46,790 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8641 for client with pid 11450 
2017-08-16 13:54:46,801 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8642 for client with pid 5053 
2017-08-16 13:54:46,811 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8643 for client with pid 5951 
2017-08-16 13:54:46,822 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8644 for client with pid 21191 
2017-08-16 13:54:46,832 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8645 for client with pid 26186 
2017-08-16 13:54:46,843 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8646 for client with pid 18379 
2017-08-16 13:54:46,853 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8647 for client with pid 21837 
2017-08-16 13:54:46,864 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8648 for client with pid 22992 
2017-08-16 13:54:46,874 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8649 for client with pid 5972 
2017-08-16 13:54:46,890 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8650 for client with pid 31189 
2017-08-16 13:54:46,901 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8651 for client with pid 23766 
2017-08-16 13:54:46,911 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8653 for client with pid 6359 
2017-08-16 13:54:46,922 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8654 for client with pid 31319 
2017-08-16 13:54:46,932 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8655 for client with pid 6105 
2017-08-16 13:54:46,948 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8656 for client with pid 5724 
2017-08-16 13:54:46,959 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8657 for client with pid 22364 
2017-08-16 13:54:46,969 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8658 for client with pid 28639 
2017-08-16 13:54:46,980 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8659 for client with pid 25445 
2017-08-16 13:54:46,995 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8660 for client with pid 5864 
2017-08-16 13:54:47,011 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8663 for client with pid 16875 
2017-08-16 13:54:47,022 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8666 for client with pid 29931 
2017-08-16 13:54:47,037 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8668 for client with pid 21232 
2017-08-16 13:54:47,048 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8669 for client with pid 18162 
2017-08-16 13:54:47,074 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8672 for client with pid 7796 
2017-08-16 13:54:47,090 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8674 for client with pid 27385 
2017-08-16 13:54:47,110 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8676 for client with pid 29563 
2017-08-16 13:54:47,121 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8677 for client with pid 30590 
2017-08-16 13:54:51,535 [ thread 48]   INFO -                    #InstantRun - Build timestamps: Local: 1502878381672, Device: 1502878381672 
2017-08-16 13:54:52,575 [ thread 48]   INFO - ools.idea.fd.InstantRunBuilder - BuildCause: FIRST_INSTALLATION_TO_DEVICE, BuildMode: FULL 
2017-08-16 13:54:52,575 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - About to execute Gradle tasks: [:buyer:assembleInternalDebug] 
2017-08-16 13:54:52,616 [ thread 51]   INFO - s.plugins.gradle.GradleManager - Instructing gradle to use java from /home/matti/Tools/android-studio-canary/android-studio/jre 
2017-08-16 13:54:52,633 [ thread 51]   INFO - oject.common.GradleInitScripts - init script file sync.local.repo contents "allprojects {\n  buildscript {\n    repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n    }\n  }\n  repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n  }\n}\n" 
2017-08-16 13:54:52,633 [ thread 51]   INFO - ild.invoker.GradleBuildInvoker - Build command line options: [--configure-on-demand, -Pandroid.injected.invoked.from.ide=true, -Pandroid.injected.build.api=25, -Pandroid.injected.build.density=xxhdpi, -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi, -Pandroid.injected.restrict.variant.name=internalDebug, -Pandroid.injected.restrict.variant.project=:buyer, -Pandroid.optional.compilation=INSTANT_DEV,FULL_APK, -Pandroid.injected.coldswap.mode=MULTIAPK, --no-build-cache, --init-script, /tmp/sync.local.repo2.gradle] 
2017-08-16 13:54:52,633 [ thread 51]   INFO - xecution.GradleExecutionHelper - Passing command-line args to Gradle Tooling API: --configure-on-demand -Pandroid.injected.invoked.from.ide=true -Pandroid.injected.build.api=25 -Pandroid.injected.build.density=xxhdpi -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi -Pandroid.injected.restrict.variant.name=internalDebug -Pandroid.injected.restrict.variant.project=:buyer -Pandroid.optional.compilation=INSTANT_DEV,FULL_APK -Pandroid.injected.coldswap.mode=MULTIAPK --no-build-cache --init-script /tmp/sync.local.repo2.gradle 
2017-08-16 13:55:11,083 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - Gradle build finished in 18s 465ms 
2017-08-16 13:55:11,111 [se-884-b01]   INFO - pl.ProjectRootManagerComponent - project roots have changed 
2017-08-16 13:55:11,117 [ thread 48]   INFO - a.gradle.run.MakeBeforeRunTask - Gradle invocation complete, success = true 
2017-08-16 13:55:11,125 [ thread 48]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 4ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 13:55:11,146 [ thread 48]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 21ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 13:55:11,146 [ thread 48]   INFO - indexing.UnindexedFilesUpdater - Unindexed files update started: 1 files to update 
2017-08-16 13:55:11,406 [ thread 48]   INFO - .diagnostic.PerformanceWatcher - Unindexed files update took 260ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 13:55:11,743 [ thread 50]   INFO -                    #InstantRun - $ adb install-multiple -r -t /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/dep/dependencies.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_6.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_5.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_2.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_3.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_9.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_4.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_0.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_7.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_8.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_1.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/outputs/apk/internal/debug/buyer-internal-debug.apk  
2017-08-16 13:55:25,153 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8626 for client with pid 31637 
2017-08-16 13:55:26,165 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8626 for client with pid 31637 
2017-08-16 13:55:27,147 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8630 for client with pid 31687 
2017-08-16 13:55:27,756 [ thread 50]   INFO - idea.run.AndroidProcessHandler - Adding device oneplus-one_a2003-192.168.51.17:5555 to monitor for launched app: com.dawanda.internal.shopping 
2017-08-16 13:55:28,185 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8630 for client with pid 31687 
2017-08-16 13:55:28,201 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '30900': closed 
2017-08-16 13:55:28,217 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '26681': closed 
2017-08-16 13:55:28,248 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8645 for client with pid 31743 
2017-08-16 13:55:28,264 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '26681': closed 
2017-08-16 13:55:28,285 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8657 for client with pid 31779 
2017-08-16 13:55:28,316 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '26681': closed 
2017-08-16 13:55:28,336 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8679 for client with pid 31797 
2017-08-16 13:55:28,362 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '26681': closed 
2017-08-16 13:55:28,373 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '26681': closed 
2017-08-16 13:55:28,399 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8677 for client with pid 31812 
2017-08-16 13:55:28,415 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '30590': closed 
2017-08-16 13:55:28,441 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8683 for client with pid 31841 
2017-08-16 13:55:28,454 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 13:55:28,467 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '30590': closed 
2017-08-16 13:55:28,483 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '28955': closed 
2017-08-16 13:55:28,524 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8685 for client with pid 31864 
2017-08-16 13:55:28,565 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '30590': closed 
2017-08-16 13:55:28,575 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '28955': closed 
2017-08-16 13:55:28,586 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8688 for client with pid 31890 
2017-08-16 13:55:28,963 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8689 for client with pid 31940 
2017-08-16 13:55:29,262 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 13:55:29,287 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 13:55:29,975 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8689 for client with pid 31940 
2017-08-16 13:55:40,063 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8609 for client with pid 32124 
2017-08-16 13:55:40,378 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8625 for client with pid 32141 
2017-08-16 13:55:44,302 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8615 for client with pid 32171 
2017-08-16 13:55:45,318 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8615 for client with pid 32171 
2017-08-16 13:55:49,600 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8604 for client with pid 32221 
2017-08-16 13:55:57,471 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 13:56:01,519 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 13:56:58,804 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8626 for client with pid 32375 
2017-08-16 13:57:00,023 [ thread 62]   INFO -                    #InstantRun - Build timestamps: Local: 1502884492787, Device: 1502884492787 
2017-08-16 13:57:00,087 [ thread 62]   WARN -                    #InstantRun - IOException while attempting to determine if app is in foreground, assuming app not alive 
2017-08-16 13:57:00,087 [ thread 62]   WARN -                    #InstantRun - Force killing app 
2017-08-16 13:57:00,153 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 13:57:02,061 [ thread 62]   INFO - ools.idea.fd.InstantRunBuilder - BuildCause: USER_CHOSE_TO_COLDSWAP, BuildMode: COLD 
2017-08-16 13:57:02,061 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - About to execute Gradle tasks: [:buyer:assembleInternalDebug] 
2017-08-16 13:57:02,065 [ thread 50]   INFO - s.plugins.gradle.GradleManager - Instructing gradle to use java from /home/matti/Tools/android-studio-canary/android-studio/jre 
2017-08-16 13:57:02,080 [ thread 50]   INFO - oject.common.GradleInitScripts - init script file sync.local.repo contents "allprojects {\n  buildscript {\n    repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n    }\n  }\n  repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n  }\n}\n" 
2017-08-16 13:57:02,081 [ thread 50]   INFO - ild.invoker.GradleBuildInvoker - Build command line options: [--configure-on-demand, -Pandroid.injected.invoked.from.ide=true, -Pandroid.injected.build.api=25, -Pandroid.injected.build.density=xxhdpi, -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi, -Pandroid.injected.restrict.variant.name=internalDebug, -Pandroid.injected.restrict.variant.project=:buyer, -Pandroid.optional.compilation=INSTANT_DEV,RESTART_ONLY, -Pandroid.injected.coldswap.mode=MULTIAPK, --no-build-cache, --init-script, /tmp/sync.local.repo15.gradle] 
2017-08-16 13:57:02,081 [ thread 50]   INFO - xecution.GradleExecutionHelper - Passing command-line args to Gradle Tooling API: --configure-on-demand -Pandroid.injected.invoked.from.ide=true -Pandroid.injected.build.api=25 -Pandroid.injected.build.density=xxhdpi -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi -Pandroid.injected.restrict.variant.name=internalDebug -Pandroid.injected.restrict.variant.project=:buyer -Pandroid.optional.compilation=INSTANT_DEV,RESTART_ONLY -Pandroid.injected.coldswap.mode=MULTIAPK --no-build-cache --init-script /tmp/sync.local.repo15.gradle 
2017-08-16 13:57:13,150 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - Gradle build finished in 11s 84ms 
2017-08-16 13:57:13,185 [se-884-b01]   INFO - pl.ProjectRootManagerComponent - project roots have changed 
2017-08-16 13:57:13,187 [ thread 62]   INFO - a.gradle.run.MakeBeforeRunTask - Gradle invocation complete, success = true 
2017-08-16 13:57:13,196 [ thread 60]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 3ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 13:57:13,207 [ thread 60]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 11ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 13:57:13,244 [ thread 60]   INFO -                    #InstantRun - $ adb install-multiple -r -t -p com.dawanda.internal.shopping /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_9.apk  
2017-08-16 13:57:13,793 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8626 for client with pid 32474 
2017-08-16 13:57:14,806 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8626 for client with pid 32474 
2017-08-16 13:57:15,520 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8645 for client with pid 32514 
2017-08-16 13:57:16,092 [ thread 60]   INFO - idea.run.AndroidProcessHandler - Adding device oneplus-one_a2003-192.168.51.17:5555 to monitor for launched app: com.dawanda.internal.shopping 
2017-08-16 13:57:16,094 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8650 for client with pid 32587 
2017-08-16 13:57:16,818 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 13:57:16,818 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 13:57:17,109 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8650 for client with pid 32587 
2017-08-16 13:57:55,530 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8604 for client with pid 304 
2017-08-16 13:57:56,548 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8604 for client with pid 304 
2017-08-16 13:58:21,007 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 13:58:21,007 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 13:58:25,762 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 13:58:25,762 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 13:59:38,336 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8626 for client with pid 720 
2017-08-16 14:00:00,949 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8645 for client with pid 868 
2017-08-16 14:00:22,254 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8630 for client with pid 910 
2017-08-16 14:01:34,024 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8654 for client with pid 1026 
2017-08-16 14:01:39,094 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8657 for client with pid 1111 
2017-08-16 14:01:40,111 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8657 for client with pid 1111 
2017-08-16 14:01:44,228 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8658 for client with pid 1166 
2017-08-16 14:02:22,384 [ thread 71]   INFO -  #git4idea.commands.GitHandler - [../../dawanda] git -c core.quotepath=false rm --ignore-unmatch --cached -- AndroidNative/buyer/src/main/java/com/dawanda/shopping/app/api/share/model/request/AnalyticsInfo.java 
2017-08-16 14:03:47,179 [ thread 60]   INFO - .diagnostic.PerformanceWatcher - Find Usages took 14ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 14:04:54,464 [ thread 72]   INFO - .diagnostic.PerformanceWatcher - Find Usages took 12ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 14:05:32,213 [pool 11/12]   INFO - attrs.AttributeDefinitionsImpl - Found tag with unknown parent: AndroidManifest.AndroidManifestCompatibleScreens 
2017-08-16 14:05:32,214 [pool 11/12]   INFO - attrs.AttributeDefinitionsImpl - Found tag with unknown parent: AndroidManifest.AndroidManifestSupportsInput 
2017-08-16 14:05:39,841 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8634 for client with pid 1357 
2017-08-16 14:05:40,857 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8634 for client with pid 1357 
2017-08-16 14:05:40,868 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8679 for client with pid 1375 
2017-08-16 14:13:33,895 [ thread 83]   INFO - .diagnostic.PerformanceWatcher - Find Usages took 10ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 14:17:10,523 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:17:10,523 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:17:17,236 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:17:17,236 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:17:30,029 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:17:30,029 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:17:31,915 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:17:31,915 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:17:36,241 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8646 for client with pid 1958 
2017-08-16 14:17:37,981 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8677 for client with pid 1978 
2017-08-16 14:17:38,058 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8683 for client with pid 1991 
2017-08-16 14:17:39,069 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8604 for client with pid 1991 
2017-08-16 14:17:39,080 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '304': closed 
2017-08-16 14:17:39,091 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8685 for client with pid 2022 
2017-08-16 14:17:39,112 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '304': closed 
2017-08-16 14:17:39,123 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8625 for client with pid 2037 
2017-08-16 14:17:39,139 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '32141': closed 
2017-08-16 14:17:39,149 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '32141': closed 
2017-08-16 14:17:39,160 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8691 for client with pid 2068 
2017-08-16 14:17:40,491 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:17:40,491 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:17:43,863 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8609 for client with pid 2106 
2017-08-16 14:17:45,670 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:17:45,670 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:18:00,551 [se-884-b01]   INFO - etup.post.PluginVersionUpgrade - Gradle model version: 3.0.0-alpha9, recommended version for IDE: 3.0.0-alpha9 
2017-08-16 14:18:00,553 [se-884-b01]   INFO - e.project.sync.GradleSyncState - Gradle sync finished in 2h 33m 52s 169ms 
2017-08-16 14:18:00,591 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - About to execute Gradle tasks: [:buyer:generateProductionReleaseSources, :buyer:mockableAndroidJar] 
2017-08-16 14:18:00,594 [ thread 87]   INFO - s.plugins.gradle.GradleManager - Instructing gradle to use java from /home/matti/Tools/android-studio-canary/android-studio/jre 
2017-08-16 14:18:00,612 [se-884-b01]   INFO - pl.ProjectRootManagerComponent - project roots have changed 
2017-08-16 14:18:00,671 [ thread 87]   INFO - oject.common.GradleInitScripts - init script file sync.local.repo contents "allprojects {\n  buildscript {\n    repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n    }\n  }\n  repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n  }\n}\n" 
2017-08-16 14:18:00,671 [ thread 87]   INFO - ild.invoker.GradleBuildInvoker - Build command line options: [--configure-on-demand, -Pandroid.injected.invoked.from.ide=true, -Pandroid.injected.generateSourcesOnly=true, --init-script, /tmp/sync.local.repo718.gradle] 
2017-08-16 14:18:00,672 [ thread 87]   INFO - xecution.GradleExecutionHelper - Passing command-line args to Gradle Tooling API: --configure-on-demand -Pandroid.injected.invoked.from.ide=true -Pandroid.injected.generateSourcesOnly=true --init-script /tmp/sync.local.repo718.gradle 
2017-08-16 14:18:00,713 [ thread 89]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 10ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 14:18:00,733 [ thread 89]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 20ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 14:18:00,733 [ thread 89]   INFO - indexing.UnindexedFilesUpdater - Unindexed files update started: 291 files to update 
2017-08-16 14:18:01,177 [ thread 89]   INFO - .diagnostic.PerformanceWatcher - Unindexed files update took 444ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 14:18:01,182 [ thread 89]   INFO -       #com.jetbrains.cidr.lang - Clearing symbols finished in 0 s. 
2017-08-16 14:18:01,189 [ thread 89]   INFO -       #com.jetbrains.cidr.lang - Loading symbols finished in 0 s. 
2017-08-16 14:18:01,190 [ thread 89]   INFO -       #com.jetbrains.cidr.lang - Building symbols finished in 0 s. 
2017-08-16 14:18:01,190 [ thread 89]   INFO -       #com.jetbrains.cidr.lang - Saving symbols finished in 0 s. 
2017-08-16 14:18:03,208 [se-884-b01]   INFO -                    #InstantRun - Cannot Instant Run: NON_DEBUG_VARIANT 
2017-08-16 14:18:05,999 [se-884-b01]   INFO - un.AndroidRunConfigurationBase - Disconnecting existing session of the same launch configuration 
2017-08-16 14:18:07,353 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8626 for client with pid 2196 
2017-08-16 14:18:07,444 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:18:07,444 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:18:08,371 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8626 for client with pid 2196 
2017-08-16 14:18:08,952 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:18:08,952 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:18:10,321 [se-884-b01]   WARN -                    #InstantRun - Instant Run enabled, but not doing an instant run build since: NON_DEBUG_VARIANT 
2017-08-16 14:18:10,334 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - Gradle build finished in 7s 220ms 
2017-08-16 14:18:10,350 [se-884-b01]   INFO - pl.ProjectRootManagerComponent - project roots have changed 
2017-08-16 14:18:10,353 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - About to execute Gradle tasks: [:buyer:assembleProductionRelease] 
2017-08-16 14:18:10,358 [ thread 93]   INFO - s.plugins.gradle.GradleManager - Instructing gradle to use java from /home/matti/Tools/android-studio-canary/android-studio/jre 
2017-08-16 14:18:10,403 [ thread 93]   INFO - oject.common.GradleInitScripts - init script file sync.local.repo contents "allprojects {\n  buildscript {\n    repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n    }\n  }\n  repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n  }\n}\n" 
2017-08-16 14:18:10,405 [ thread 93]   INFO - ild.invoker.GradleBuildInvoker - Build command line options: [--configure-on-demand, -Pandroid.injected.invoked.from.ide=true, -Pandroid.injected.build.api=25, -Pandroid.injected.build.density=xxhdpi, -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi, --init-script, /tmp/sync.local.repo190.gradle] 
2017-08-16 14:18:10,405 [ thread 93]   INFO - xecution.GradleExecutionHelper - Passing command-line args to Gradle Tooling API: --configure-on-demand -Pandroid.injected.invoked.from.ide=true -Pandroid.injected.build.api=25 -Pandroid.injected.build.density=xxhdpi -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi --init-script /tmp/sync.local.repo190.gradle 
2017-08-16 14:18:10,422 [ thread 83]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 4ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 14:18:10,446 [ thread 83]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 24ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 14:18:45,201 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - Gradle build finished in 34s 842ms 
2017-08-16 14:18:45,214 [se-884-b01]   INFO - pl.ProjectRootManagerComponent - project roots have changed 
2017-08-16 14:18:45,216 [ thread 97]   INFO - a.gradle.run.MakeBeforeRunTask - Gradle invocation complete, success = true 
2017-08-16 14:18:45,224 [ thread 91]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 3ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 14:18:45,234 [ thread 91]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 10ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 14:18:45,263 [ thread 91]   INFO -                    #InstantRun - Using legacy/main APK deploy task 
2017-08-16 14:19:02,321 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8615 for client with pid 2362 
2017-08-16 14:19:02,712 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8630 for client with pid 2423 
2017-08-16 14:19:03,741 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8630 for client with pid 2423 
2017-08-16 14:19:03,752 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8634 for client with pid 2446 
2017-08-16 14:19:03,762 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '1357': closed 
2017-08-16 14:19:03,773 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '868': closed 
2017-08-16 14:19:03,784 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '868': closed 
2017-08-16 14:19:04,197 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8692 for client with pid 2488 
2017-08-16 14:19:04,198 [ thread 91]   INFO - idea.run.AndroidProcessHandler - Adding device oneplus-one_a2003-192.168.51.17:5555 to monitor for launched app: com.dawanda.shopping 
2017-08-16 14:19:04,325 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:19:04,325 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:19:04,325 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:19:05,213 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8692 for client with pid 2488 
2017-08-16 14:19:07,271 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:19:07,271 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:19:07,271 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:20:10,684 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8646 for client with pid 2730 
2017-08-16 14:20:10,931 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8693 for client with pid 2745 
2017-08-16 14:20:11,949 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8685 for client with pid 2745 
2017-08-16 14:20:16,654 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:20:16,654 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:20:16,654 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:20:21,155 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:20:21,155 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:20:21,155 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:25:37,915 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8691 for client with pid 3070 
2017-08-16 14:25:38,211 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:25:38,211 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:25:38,211 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:25:38,211 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:25:38,211 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:25:38,211 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:25:38,931 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8691 for client with pid 3070 
2017-08-16 14:25:43,172 [se-884-b01]   INFO - nitor.AndroidToolWindowFactory - Successfully obtained debug bridge 
2017-08-16 14:30:00,963 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8657 for client with pid 3485 
2017-08-16 14:36:49,538 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8693 for client with pid 3865 
2017-08-16 14:36:49,829 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8694 for client with pid 3885 
2017-08-16 14:36:49,896 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:36:49,896 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:36:49,896 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:36:49,921 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:36:49,921 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:36:49,921 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:36:49,921 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:36:49,922 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:36:49,922 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:36:49,948 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:36:49,948 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:36:49,948 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 14:36:50,844 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8625 for client with pid 3885 
2017-08-16 14:36:50,854 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '1166': closed 
2017-08-16 14:37:51,859 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8694 for client with pid 4083 
2017-08-16 14:37:52,911 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8694 for client with pid 4083 
2017-08-16 14:38:27,955 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8695 for client with pid 4213 
2017-08-16 14:54:39,920 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8609 for client with pid 5034 
2017-08-16 14:54:57,925 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8677 for client with pid 5060 
2017-08-16 14:54:58,679 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8696 for client with pid 5098 
2017-08-16 14:54:58,791 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8697 for client with pid 5120 
2017-08-16 14:54:59,563 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8698 for client with pid 5153 
2017-08-16 15:02:59,743 [ pool 9/12]   INFO - attrs.AttributeDefinitionsImpl - Found tag with unknown parent: AndroidManifest.AndroidManifestCompatibleScreens 
2017-08-16 15:02:59,743 [ pool 9/12]   INFO - attrs.AttributeDefinitionsImpl - Found tag with unknown parent: AndroidManifest.AndroidManifestSupportsInput 
2017-08-16 15:06:10,857 [thread 110]   INFO - project.TargetPlatformDetector - Using default platform for file: SerializableKt.class 
2017-08-16 15:06:40,922 [thread 109]   INFO - .diagnostic.PerformanceWatcher - Find Usages took 61ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 15:07:32,559 [thread 110]   INFO - t.javadoc.JavaDocInfoGenerator - Wrong navElement: FUN; original = KtLightMethodImpl:updateUserBasedSessionParameters of class class org.jetbrains.kotlin.asJava.elements.KtLightMethodImpl 
2017-08-16 15:07:33,216 [thread 110]   INFO - t.javadoc.JavaDocInfoGenerator - Wrong navElement: FUN; original = KtLightMethodImpl:updateUserBasedSessionParameters of class class org.jetbrains.kotlin.asJava.elements.KtLightMethodImpl 
2017-08-16 15:09:59,546 [se-884-b01]   WARN - ConfigurableExtensionPointUtil - use other group instead of unexpected one: project.propCompiler 
2017-08-16 15:15:26,893 [se-884-b01]   INFO -                    #InstantRun - Cannot Instant Run: NON_DEBUG_VARIANT 
2017-08-16 15:15:28,123 [se-884-b01]   INFO - un.AndroidRunConfigurationBase - Disconnecting existing session of the same launch configuration 
2017-08-16 15:15:48,848 [st Monitor]   INFO - id.tools.idea.ddms.DevicePanel - Device disconnected: oneplus-one_a2003-192.168.51.17:5555 
2017-08-16 15:16:20,163 [st Monitor]   INFO - id.tools.idea.ddms.DevicePanel - Device connected: 192.168.51.17:5555 
2017-08-16 15:16:20,400 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8600 for client with pid 8449 
2017-08-16 15:16:20,410 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8601 for client with pid 18177 
2017-08-16 15:16:20,421 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8602 for client with pid 11652 
2017-08-16 15:16:20,436 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8603 for client with pid 11525 
2017-08-16 15:16:20,447 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8604 for client with pid 4231 
2017-08-16 15:16:20,458 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8605 for client with pid 14728 
2017-08-16 15:16:20,473 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8606 for client with pid 6025 
2017-08-16 15:16:20,489 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8608 for client with pid 6026 
2017-08-16 15:16:20,500 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8609 for client with pid 11277 
2017-08-16 15:16:20,510 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8610 for client with pid 5902 
2017-08-16 15:16:20,526 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8611 for client with pid 1039 
2017-08-16 15:16:20,542 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8613 for client with pid 4751 
2017-08-16 15:16:20,552 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8614 for client with pid 30483 
2017-08-16 15:16:20,563 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8615 for client with pid 2196 
2017-08-16 15:16:20,573 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8616 for client with pid 5909 
2017-08-16 15:16:20,584 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8617 for client with pid 4247 
2017-08-16 15:16:20,599 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8618 for client with pid 7319 
2017-08-16 15:16:20,610 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8619 for client with pid 7450 
2017-08-16 15:16:20,621 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8620 for client with pid 19359 
2017-08-16 15:16:20,634 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8622 for client with pid 4643 
2017-08-16 15:16:20,645 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8623 for client with pid 13091 
2017-08-16 15:16:20,655 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8624 for client with pid 1321 
2017-08-16 15:16:20,666 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8625 for client with pid 7083 
2017-08-16 15:16:20,677 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8626 for client with pid 5803 
2017-08-16 15:16:20,687 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8627 for client with pid 6571 
2017-08-16 15:16:20,698 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8628 for client with pid 6959 
2017-08-16 15:16:20,708 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8629 for client with pid 5937 
2017-08-16 15:16:20,714 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8630 for client with pid 8243 
2017-08-16 15:16:20,724 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8631 for client with pid 20917 
2017-08-16 15:16:20,735 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8633 for client with pid 5944 
2017-08-16 15:16:20,745 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8634 for client with pid 2488 
2017-08-16 15:16:20,756 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8635 for client with pid 697 
2017-08-16 15:16:20,771 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8636 for client with pid 6074 
2017-08-16 15:16:20,782 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8640 for client with pid 11450 
2017-08-16 15:16:20,792 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8641 for client with pid 5053 
2017-08-16 15:16:20,803 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8642 for client with pid 5822 
2017-08-16 15:16:20,818 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8643 for client with pid 5951 
2017-08-16 15:16:20,829 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8644 for client with pid 6214 
2017-08-16 15:16:20,839 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8646 for client with pid 21191 
2017-08-16 15:16:20,850 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8648 for client with pid 6350 
2017-08-16 15:16:20,860 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8649 for client with pid 22992 
2017-08-16 15:16:20,871 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8651 for client with pid 5972 
2017-08-16 15:16:20,886 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8653 for client with pid 23766 
2017-08-16 15:16:20,897 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8655 for client with pid 6359 
2017-08-16 15:16:20,908 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8656 for client with pid 6105 
2017-08-16 15:16:20,918 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8657 for client with pid 5724 
2017-08-16 15:16:20,928 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8659 for client with pid 1375 
2017-08-16 15:16:20,944 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8660 for client with pid 5985 
2017-08-16 15:16:20,954 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8663 for client with pid 6498 
2017-08-16 15:16:20,965 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8666 for client with pid 25445 
2017-08-16 15:16:20,975 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8668 for client with pid 5864 
2017-08-16 15:16:20,986 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8669 for client with pid 16875 
2017-08-16 15:16:20,997 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8672 for client with pid 29931 
2017-08-16 15:16:21,013 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8674 for client with pid 6125 
2017-08-16 15:16:21,023 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8676 for client with pid 21232 
2017-08-16 15:16:21,039 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8677 for client with pid 18162 
2017-08-16 15:16:21,049 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8679 for client with pid 7796 
2017-08-16 15:16:21,060 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8685 for client with pid 6004 
2017-08-16 15:16:21,070 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8691 for client with pid 27385 
2017-08-16 15:16:21,086 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8692 for client with pid 29563 
2017-08-16 15:16:21,096 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8693 for client with pid 5887 
2017-08-16 15:16:25,030 [se-884-b01]   WARN -                    #InstantRun - Instant Run enabled, but not doing an instant run build since: NON_DEBUG_VARIANT 
2017-08-16 15:16:25,095 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - About to execute Gradle tasks: [:buyer:assembleProductionRelease] 
2017-08-16 15:16:25,098 [thread 115]   INFO - s.plugins.gradle.GradleManager - Instructing gradle to use java from /home/matti/Tools/android-studio-canary/android-studio/jre 
2017-08-16 15:16:25,134 [thread 115]   INFO - oject.common.GradleInitScripts - init script file sync.local.repo contents "allprojects {\n  buildscript {\n    repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n    }\n  }\n  repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n  }\n}\n" 
2017-08-16 15:16:25,134 [thread 115]   INFO - ild.invoker.GradleBuildInvoker - Build command line options: [--configure-on-demand, -Pandroid.injected.invoked.from.ide=true, -Pandroid.injected.build.api=25, -Pandroid.injected.build.density=xxhdpi, -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi, --init-script, /tmp/sync.local.repo677.gradle] 
2017-08-16 15:16:25,134 [thread 115]   INFO - xecution.GradleExecutionHelper - Passing command-line args to Gradle Tooling API: --configure-on-demand -Pandroid.injected.invoked.from.ide=true -Pandroid.injected.build.api=25 -Pandroid.injected.build.density=xxhdpi -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi --init-script /tmp/sync.local.repo677.gradle 
2017-08-16 15:16:30,564 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8694 for client with pid 6882 
2017-08-16 15:16:50,295 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - Gradle build finished in 25s 195ms 
2017-08-16 15:16:50,335 [se-884-b01]   INFO - pl.ProjectRootManagerComponent - project roots have changed 
2017-08-16 15:16:50,337 [thread 125]   INFO - a.gradle.run.MakeBeforeRunTask - Gradle invocation complete, success = true 
2017-08-16 15:16:50,354 [thread 114]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 4ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 15:16:50,366 [thread 114]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 12ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 15:16:50,410 [thread 114]   INFO -                    #InstantRun - Using legacy/main APK deploy task 
2017-08-16 15:17:02,224 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8695 for client with pid 6944 
2017-08-16 15:17:03,238 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8695 for client with pid 6944 
2017-08-16 15:17:09,168 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8626 for client with pid 6982 
2017-08-16 15:17:09,931 [thread 114]   INFO - idea.run.AndroidProcessHandler - Adding device oneplus-one_a2003-192.168.51.17:5555 to monitor for launched app: com.dawanda.shopping 
2017-08-16 15:17:10,064 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:17:10,244 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8608 for client with pid 6982 
2017-08-16 15:17:10,280 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '6026': closed 
2017-08-16 15:17:10,311 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8629 for client with pid 7012 
2017-08-16 15:17:10,363 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '6026': closed 
2017-08-16 15:17:10,389 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8696 for client with pid 7056 
2017-08-16 15:17:10,425 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '6026': closed 
2017-08-16 15:17:10,527 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8698 for client with pid 7077 
2017-08-16 15:17:10,564 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8699 for client with pid 7144 
2017-08-16 15:17:52,368 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8644 for client with pid 7349 
2017-08-16 15:17:53,268 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8648 for client with pid 7419 
2017-08-16 15:17:54,000 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8685 for client with pid 7482 
2017-08-16 15:17:55,016 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8685 for client with pid 7482 
2017-08-16 15:17:55,038 [nt Monitor]   WARN -            #com.android.ddmlib - Can't bind to local 8700 for debugger 
2017-08-16 15:17:55,167 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8701 for client with pid 7531 
2017-08-16 15:17:55,431 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8663 for client with pid 7574 
2017-08-16 15:18:00,378 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8627 for client with pid 7700 
2017-08-16 15:18:01,394 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8627 for client with pid 7700 
2017-08-16 15:19:30,238 [se-884-b01]   INFO - etup.post.PluginVersionUpgrade - Gradle model version: 3.0.0-alpha9, recommended version for IDE: 3.0.0-alpha9 
2017-08-16 15:19:30,239 [se-884-b01]   INFO - e.project.sync.GradleSyncState - Gradle sync finished in 51yr 9mo 0w 6d 13h 19m 30s 240ms 
2017-08-16 15:19:30,266 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - About to execute Gradle tasks: [:buyer:generateInternalDebugSources, :buyer:generateInternalDebugAndroidTestSources, :buyer:mockableAndroidJar] 
2017-08-16 15:19:30,268 [thread 137]   INFO - s.plugins.gradle.GradleManager - Instructing gradle to use java from /home/matti/Tools/android-studio-canary/android-studio/jre 
2017-08-16 15:19:30,280 [se-884-b01]   INFO - pl.ProjectRootManagerComponent - project roots have changed 
2017-08-16 15:19:30,314 [thread 137]   INFO - oject.common.GradleInitScripts - init script file sync.local.repo contents "allprojects {\n  buildscript {\n    repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n    }\n  }\n  repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n  }\n}\n" 
2017-08-16 15:19:30,314 [thread 137]   INFO - ild.invoker.GradleBuildInvoker - Build command line options: [--configure-on-demand, -Pandroid.injected.invoked.from.ide=true, -Pandroid.injected.generateSourcesOnly=true, --init-script, /tmp/sync.local.repo430.gradle] 
2017-08-16 15:19:30,314 [thread 137]   INFO - xecution.GradleExecutionHelper - Passing command-line args to Gradle Tooling API: --configure-on-demand -Pandroid.injected.invoked.from.ide=true -Pandroid.injected.generateSourcesOnly=true --init-script /tmp/sync.local.repo430.gradle 
2017-08-16 15:19:30,324 [thread 140]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 3ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 15:19:30,344 [thread 140]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 20ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 15:19:30,373 [thread 140]   INFO -       #com.jetbrains.cidr.lang - Clearing symbols finished in 0 s. 
2017-08-16 15:19:30,377 [thread 140]   INFO -       #com.jetbrains.cidr.lang - Loading symbols finished in 0 s. 
2017-08-16 15:19:30,379 [thread 140]   INFO -       #com.jetbrains.cidr.lang - Building symbols finished in 0 s. 
2017-08-16 15:19:30,384 [thread 140]   INFO -       #com.jetbrains.cidr.lang - Saving symbols finished in 0 s. 
2017-08-16 15:19:32,260 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - Gradle build finished in 1s 990ms 
2017-08-16 15:19:32,275 [se-884-b01]   INFO - pl.ProjectRootManagerComponent - project roots have changed 
2017-08-16 15:19:32,287 [thread 137]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 3ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 15:19:32,303 [thread 137]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 16ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 15:19:36,690 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8600 for client with pid 7936 
2017-08-16 15:19:36,951 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:19:37,027 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:19:40,424 [thread 144]   INFO -                    #InstantRun - Build timestamps: Local: 1502884622286, Device: 1502884622286 
2017-08-16 15:19:41,519 [thread 144]   INFO - ools.idea.fd.InstantRunBuilder - BuildCause: FIRST_INSTALLATION_TO_DEVICE, BuildMode: FULL 
2017-08-16 15:19:41,520 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - About to execute Gradle tasks: [:buyer:assembleInternalDebug] 
2017-08-16 15:19:41,524 [thread 137]   INFO - s.plugins.gradle.GradleManager - Instructing gradle to use java from /home/matti/Tools/android-studio-canary/android-studio/jre 
2017-08-16 15:19:41,554 [thread 137]   INFO - oject.common.GradleInitScripts - init script file sync.local.repo contents "allprojects {\n  buildscript {\n    repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n    }\n  }\n  repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n  }\n}\n" 
2017-08-16 15:19:41,554 [thread 137]   INFO - ild.invoker.GradleBuildInvoker - Build command line options: [--configure-on-demand, -Pandroid.injected.invoked.from.ide=true, -Pandroid.injected.build.api=25, -Pandroid.injected.build.density=xxhdpi, -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi, -Pandroid.injected.restrict.variant.name=internalDebug, -Pandroid.injected.restrict.variant.project=:buyer, -Pandroid.optional.compilation=INSTANT_DEV,FULL_APK, -Pandroid.injected.coldswap.mode=MULTIAPK, --no-build-cache, --init-script, /tmp/sync.local.repo92.gradle] 
2017-08-16 15:19:41,554 [thread 137]   INFO - xecution.GradleExecutionHelper - Passing command-line args to Gradle Tooling API: --configure-on-demand -Pandroid.injected.invoked.from.ide=true -Pandroid.injected.build.api=25 -Pandroid.injected.build.density=xxhdpi -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi -Pandroid.injected.restrict.variant.name=internalDebug -Pandroid.injected.restrict.variant.project=:buyer -Pandroid.optional.compilation=INSTANT_DEV,FULL_APK -Pandroid.injected.coldswap.mode=MULTIAPK --no-build-cache --init-script /tmp/sync.local.repo92.gradle 
2017-08-16 15:19:52,191 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - Gradle build finished in 10s 666ms 
2017-08-16 15:19:52,207 [se-884-b01]   INFO - pl.ProjectRootManagerComponent - project roots have changed 
2017-08-16 15:19:52,209 [thread 144]   INFO - a.gradle.run.MakeBeforeRunTask - Gradle invocation complete, success = true 
2017-08-16 15:19:52,218 [thread 143]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 3ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 15:19:52,251 [thread 143]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 33ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 15:19:52,348 [thread 141]   INFO -                    #InstantRun - $ adb install-multiple -r -t /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/dep/dependencies.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_2.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_1.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_9.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_6.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_7.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_3.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_5.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_0.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_8.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_4.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/outputs/apk/internal/debug/buyer-internal-debug.apk  
2017-08-16 15:20:06,928 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8608 for client with pid 8141 
2017-08-16 15:20:08,600 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8615 for client with pid 8174 
2017-08-16 15:20:08,655 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8629 for client with pid 8189 
2017-08-16 15:20:08,729 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8659 for client with pid 8223 
2017-08-16 15:20:09,056 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8660 for client with pid 8279 
2017-08-16 15:20:09,222 [thread 141]   INFO - idea.run.AndroidProcessHandler - Adding device oneplus-one_a2003-192.168.51.17:5555 to monitor for launched app: com.dawanda.internal.shopping 
2017-08-16 15:20:09,603 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:20:09,603 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:20:09,603 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:20:09,603 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:20:09,860 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:20:09,860 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:20:10,067 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8644 for client with pid 8279 
2017-08-16 15:20:10,084 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8648 for client with pid 8322 
2017-08-16 15:20:10,104 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '7349': closed 
2017-08-16 15:20:10,120 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '7419': closed 
2017-08-16 15:20:10,131 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8695 for client with pid 8336 
2017-08-16 15:20:10,141 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '7349': closed 
2017-08-16 15:20:10,157 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '7419': closed 
2017-08-16 15:20:10,168 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '7419': closed 
2017-08-16 15:20:10,183 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8703 for client with pid 8356 
2017-08-16 15:20:35,149 [ pool 7/12]   INFO - attrs.AttributeDefinitionsImpl - Found tag with unknown parent: AndroidManifest.AndroidManifestSupportsInput 
2017-08-16 15:20:35,149 [ pool 7/12]   INFO - attrs.AttributeDefinitionsImpl - Found tag with unknown parent: AndroidManifest.AndroidManifestCompatibleScreens 
2017-08-16 15:21:04,324 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8663 for client with pid 8586 
2017-08-16 15:21:05,029 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8685 for client with pid 8654 
2017-08-16 15:21:05,411 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8694 for client with pid 8692 
2017-08-16 15:21:05,705 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8704 for client with pid 8718 
2017-08-16 15:21:06,718 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8704 for client with pid 8718 
2017-08-16 15:21:06,729 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8705 for client with pid 8743 
2017-08-16 15:21:07,067 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8627 for client with pid 8847 
2017-08-16 15:21:08,079 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8608 for client with pid 8847 
2017-08-16 15:24:44,107 [se-884-b01]   WARN - tectAndAdjustIndentOptionsTask - Indent detection is too long for: PlayAnalytics.java 
2017-08-16 15:24:44,109 [se-884-b01]   WARN - tectAndAdjustIndentOptionsTask - Indent detection is too long for: DiyDetails.java 
2017-08-16 15:25:08,907 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8615 for client with pid 9016 
2017-08-16 15:25:09,187 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:25:09,187 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:25:09,212 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:25:09,212 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:25:09,930 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8615 for client with pid 9016 
2017-08-16 15:27:07,604 [thread 157]   INFO -                    #InstantRun - Build timestamps: Local: 1502889581715, Device: 1502889581715 
2017-08-16 15:27:07,664 [thread 157]   INFO -                    #InstantRun - Application not running 
2017-08-16 15:27:08,798 [thread 157]   INFO - ools.idea.fd.InstantRunBuilder - BuildCause: USER_CHOSE_TO_COLDSWAP, BuildMode: COLD 
2017-08-16 15:27:08,798 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - About to execute Gradle tasks: [:buyer:assembleInternalDebug] 
2017-08-16 15:27:08,802 [thread 160]   INFO - s.plugins.gradle.GradleManager - Instructing gradle to use java from /home/matti/Tools/android-studio-canary/android-studio/jre 
2017-08-16 15:27:08,825 [thread 160]   INFO - oject.common.GradleInitScripts - init script file sync.local.repo contents "allprojects {\n  buildscript {\n    repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n    }\n  }\n  repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n  }\n}\n" 
2017-08-16 15:27:08,825 [thread 160]   INFO - ild.invoker.GradleBuildInvoker - Build command line options: [--configure-on-demand, -Pandroid.injected.invoked.from.ide=true, -Pandroid.injected.build.api=25, -Pandroid.injected.build.density=xxhdpi, -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi, -Pandroid.injected.restrict.variant.name=internalDebug, -Pandroid.injected.restrict.variant.project=:buyer, -Pandroid.optional.compilation=INSTANT_DEV,RESTART_ONLY, -Pandroid.injected.coldswap.mode=MULTIAPK, --no-build-cache, --init-script, /tmp/sync.local.repo875.gradle] 
2017-08-16 15:27:08,825 [thread 160]   INFO - xecution.GradleExecutionHelper - Passing command-line args to Gradle Tooling API: --configure-on-demand -Pandroid.injected.invoked.from.ide=true -Pandroid.injected.build.api=25 -Pandroid.injected.build.density=xxhdpi -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi -Pandroid.injected.restrict.variant.name=internalDebug -Pandroid.injected.restrict.variant.project=:buyer -Pandroid.optional.compilation=INSTANT_DEV,RESTART_ONLY -Pandroid.injected.coldswap.mode=MULTIAPK --no-build-cache --init-script /tmp/sync.local.repo875.gradle 
2017-08-16 15:27:14,956 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - Gradle build finished with 2 error(s) in 6s 143ms 
2017-08-16 15:27:14,999 [se-884-b01]   INFO - pl.ProjectRootManagerComponent - project roots have changed 
2017-08-16 15:27:15,001 [thread 157]   INFO - a.gradle.run.MakeBeforeRunTask - Couldn't get ProjectBuildOutput. 
2017-08-16 15:27:15,002 [thread 157]   INFO - a.gradle.run.MakeBeforeRunTask - Gradle invocation complete, success = false 
2017-08-16 15:27:15,061 [thread 159]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 3ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 15:27:15,098 [thread 159]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 36ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 15:28:12,194 [thread 165]   INFO - t.javadoc.JavaDocInfoGenerator - Wrong navElement: FUN; original = KtLightMethodImpl:updateUserBasedSessionParameters of class class org.jetbrains.kotlin.asJava.elements.KtLightMethodImpl 
2017-08-16 15:28:13,513 [thread 161]   INFO - t.javadoc.JavaDocInfoGenerator - Wrong navElement: FUN; original = KtLightMethodImpl:updateUserBasedSessionParameters of class class org.jetbrains.kotlin.asJava.elements.KtLightMethodImpl 
2017-08-16 15:29:10,983 [thread 166]   INFO -                    #InstantRun - Build timestamps: Local: 1502889581715, Device: 1502889581715 
2017-08-16 15:29:11,080 [thread 166]   INFO -                    #InstantRun - Application not running 
2017-08-16 15:29:12,210 [thread 166]   INFO - ools.idea.fd.InstantRunBuilder - BuildCause: USER_REQUESTED_COLDSWAP, BuildMode: COLD 
2017-08-16 15:29:12,211 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - About to execute Gradle tasks: [:buyer:assembleInternalDebug] 
2017-08-16 15:29:12,215 [thread 161]   INFO - s.plugins.gradle.GradleManager - Instructing gradle to use java from /home/matti/Tools/android-studio-canary/android-studio/jre 
2017-08-16 15:29:12,254 [thread 161]   INFO - oject.common.GradleInitScripts - init script file sync.local.repo contents "allprojects {\n  buildscript {\n    repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n    }\n  }\n  repositories {\n      maven { url '/home/matti/Tools/android-studio-canary/android-studio/gradle/m2repository'}\n  }\n}\n" 
2017-08-16 15:29:12,254 [thread 161]   INFO - ild.invoker.GradleBuildInvoker - Build command line options: [--configure-on-demand, -Pandroid.injected.invoked.from.ide=true, -Pandroid.injected.build.api=25, -Pandroid.injected.build.density=xxhdpi, -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi, -Pandroid.injected.restrict.variant.name=internalDebug, -Pandroid.injected.restrict.variant.project=:buyer, -Pandroid.optional.compilation=INSTANT_DEV,RESTART_ONLY, -Pandroid.injected.coldswap.mode=MULTIAPK, --no-build-cache, --init-script, /tmp/sync.local.repo316.gradle] 
2017-08-16 15:29:12,254 [thread 161]   INFO - xecution.GradleExecutionHelper - Passing command-line args to Gradle Tooling API: --configure-on-demand -Pandroid.injected.invoked.from.ide=true -Pandroid.injected.build.api=25 -Pandroid.injected.build.density=xxhdpi -Pandroid.injected.build.abi=arm64-v8a,armeabi-v7a,armeabi -Pandroid.injected.restrict.variant.name=internalDebug -Pandroid.injected.restrict.variant.project=:buyer -Pandroid.optional.compilation=INSTANT_DEV,RESTART_ONLY -Pandroid.injected.coldswap.mode=MULTIAPK --no-build-cache --init-script /tmp/sync.local.repo316.gradle 
2017-08-16 15:29:22,514 [se-884-b01]   INFO - ild.invoker.GradleBuildInvoker - Gradle build finished in 10s 299ms 
2017-08-16 15:29:22,542 [se-884-b01]   INFO - pl.ProjectRootManagerComponent - project roots have changed 
2017-08-16 15:29:22,544 [thread 166]   INFO - a.gradle.run.MakeBeforeRunTask - Gradle invocation complete, success = true 
2017-08-16 15:29:22,554 [thread 166]   INFO - .diagnostic.PerformanceWatcher - Pushing properties took 4ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 15:29:22,567 [thread 166]   INFO - .diagnostic.PerformanceWatcher - Indexable file iteration took 13ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 15:29:22,567 [thread 166]   INFO - indexing.UnindexedFilesUpdater - Unindexed files update started: 1 files to update 
2017-08-16 15:29:22,652 [thread 166]   INFO - .diagnostic.PerformanceWatcher - Unindexed files update took 85ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 15:29:22,925 [thread 171]   INFO -                    #InstantRun - $ adb install-multiple -r -t /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/dep/dependencies.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_2.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_5.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_3.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_0.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_9.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_8.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_6.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_7.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_1.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/intermediates/split-apk/internal/debug/slices/slice_4.apk /home/matti/Development/dawanda/AndroidNative/buyer/build/outputs/apk/internal/debug/buyer-internal-debug.apk  
2017-08-16 15:29:37,668 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8627 for client with pid 9512 
2017-08-16 15:29:38,684 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8627 for client with pid 9512 
2017-08-16 15:29:39,692 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8629 for client with pid 9553 
2017-08-16 15:29:39,772 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8644 for client with pid 9573 
2017-08-16 15:29:40,272 [thread 171]   INFO - idea.run.AndroidProcessHandler - Adding device oneplus-one_a2003-192.168.51.17:5555 to monitor for launched app: com.dawanda.internal.shopping 
2017-08-16 15:29:40,798 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8644 for client with pid 9573 
2017-08-16 15:29:40,814 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8648 for client with pid 9605 
2017-08-16 15:29:40,835 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8586': closed 
2017-08-16 15:29:40,856 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8356': closed 
2017-08-16 15:29:40,871 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8654': closed 
2017-08-16 15:29:40,882 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8692': closed 
2017-08-16 15:29:40,898 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8586': closed 
2017-08-16 15:29:40,900 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:29:40,900 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:29:40,900 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:29:40,913 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8695 for client with pid 9631 
2017-08-16 15:29:40,924 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8356': closed 
2017-08-16 15:29:40,926 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:29:40,926 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:29:40,926 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:29:40,950 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8654': closed 
2017-08-16 15:29:40,971 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8692': closed 
2017-08-16 15:29:40,982 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8586': closed 
2017-08-16 15:29:40,998 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8654': closed 
2017-08-16 15:29:41,005 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:29:41,005 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:29:41,005 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:29:41,008 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8692': closed 
2017-08-16 15:29:41,019 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8586': closed 
2017-08-16 15:29:41,039 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8712 for client with pid 9667 
2017-08-16 15:29:41,050 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8654': closed 
2017-08-16 15:29:41,065 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8692': closed 
2017-08-16 15:29:41,076 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8586': closed 
2017-08-16 15:29:41,086 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8654': closed 
2017-08-16 15:29:41,097 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8717 for client with pid 9687 
2017-08-16 15:29:41,107 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8692': closed 
2017-08-16 15:29:41,123 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8654': closed 
2017-08-16 15:29:41,133 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8692': closed 
2017-08-16 15:29:41,144 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8654': closed 
2017-08-16 15:29:41,155 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8722 for client with pid 9707 
2017-08-16 15:29:41,170 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8692': closed 
2017-08-16 15:29:41,210 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '8692': closed 
2017-08-16 15:29:41,243 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8725 for client with pid 9727 
2017-08-16 15:30:00,613 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8704 for client with pid 9903 
2017-08-16 15:31:21,164 [nt Monitor]   WARN -            #com.android.ddmlib - Can't bind to local 8700 for debugger 
2017-08-16 15:31:21,369 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8701 for client with pid 10017 
2017-08-16 15:42:42,369 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8600 for client with pid 10443 
2017-08-16 15:42:43,380 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8600 for client with pid 10443 
2017-08-16 15:42:43,391 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '9605': closed 
2017-08-16 15:42:43,401 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8627 for client with pid 10455 
2017-08-16 15:42:43,412 [nt Monitor]   WARN -            #com.android.ddmlib - Adb rejected connection to client '9605': closed 
2017-08-16 15:42:43,423 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8705 for client with pid 10473 
2017-08-16 15:42:43,575 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8726 for client with pid 10593 
2017-08-16 15:42:43,775 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:42:43,775 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:42:43,775 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:42:43,801 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:42:43,801 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:42:43,801 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:42:43,801 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:42:43,801 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:42:43,801 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:42:43,853 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:42:43,853 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:42:43,853 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:42:44,145 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8629 for client with pid 10637 
2017-08-16 15:43:28,638 [thread 175]   INFO - .diagnostic.PerformanceWatcher - Find Usages took 15ms; general responsiveness: ok; EDT responsiveness: ok 
2017-08-16 15:44:54,499 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8644 for client with pid 10763 
2017-08-16 15:45:05,591 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8699 for client with pid 10789 
2017-08-16 15:45:06,602 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8699 for client with pid 10789 
2017-08-16 15:45:06,612 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8717 for client with pid 10802 
2017-08-16 15:45:06,623 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8722 for client with pid 10834 
2017-08-16 15:45:06,634 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8727 for client with pid 10874 
2017-08-16 15:45:06,649 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8728 for client with pid 10888 
2017-08-16 15:45:06,665 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8729 for client with pid 10914 
2017-08-16 15:45:07,059 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8725 for client with pid 10949 
2017-08-16 15:45:07,175 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:45:07,175 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:45:07,175 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:45:07,201 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:45:07,201 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:45:07,201 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:45:09,646 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8608 for client with pid 11046 
2017-08-16 15:45:10,663 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8608 for client with pid 11046 
2017-08-16 15:45:45,567 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8600 for client with pid 11180 
2017-08-16 15:45:45,647 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:45:45,647 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:45:45,647 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:45:45,673 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:45:45,673 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:45:45,673 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 15:45:46,581 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8600 for client with pid 11180 
2017-08-16 15:52:51,140 [thread 181]   INFO - project.TargetPlatformDetector - Using default platform for file: SerializableKt.class 
2017-08-16 15:53:49,542 [thread 184]   INFO - t.javadoc.JavaDocInfoGenerator - Wrong navElement: FUN; original = KtLightMethodImpl:encodeCartItemsAsJsonStringArray of class class org.jetbrains.kotlin.asJava.elements.KtLightMethodImpl 
2017-08-16 15:54:05,297 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8601 for client with pid 11581 
2017-08-16 15:54:06,537 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8629 for client with pid 11599 
2017-08-16 15:54:07,562 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8629 for client with pid 11599 
2017-08-16 15:54:07,573 [nt Monitor]   WARN -            #com.android.ddmlib - Can't bind to local 8700 for debugger 
2017-08-16 16:00:00,611 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8627 for client with pid 11902 
2017-08-16 16:01:34,023 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8644 for client with pid 11961 
2017-08-16 16:03:43,078 [pool 11/12]   INFO - project.TargetPlatformDetector - Using default platform for file: kotlin.kotlin_builtins 
2017-08-16 16:04:28,875 [ pool 4/12]   INFO - project.TargetPlatformDetector - Using default platform for file: SerializableKt.class 
2017-08-16 16:04:32,543 [ pool 4/12]   INFO - project.TargetPlatformDetector - Using default platform for file: SerializableKt.class 
2017-08-16 16:04:36,863 [ pool 2/12]   INFO - project.TargetPlatformDetector - Using default platform for file: SerializableKt.class 
2017-08-16 16:04:41,394 [ pool 2/12]   INFO - project.TargetPlatformDetector - Using default platform for file: SerializableKt.class 
2017-08-16 16:05:01,444 [ pool 1/12]   INFO - project.TargetPlatformDetector - Using default platform for file: SerializableKt.class 
2017-08-16 16:05:57,110 [thread 189]   INFO - t.javadoc.JavaDocInfoGenerator - Wrong navElement: FUN; original = KtLightMethodImpl:encodeCartItemsAsJsonStringArray of class class org.jetbrains.kotlin.asJava.elements.KtLightMethodImpl 
2017-08-16 16:06:02,916 [nt Monitor]   INFO -            #com.android.ddmlib - Opening a debugger listener at port 8699 for client with pid 12120 
2017-08-16 16:06:03,134 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 16:06:03,134 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 16:06:03,134 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 16:06:03,135 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 16:06:03,135 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 16:06:03,135 [51.17:5555]   INFO - .firebase.logs.FirebaseLogTask - Processing Firebase log with tag FirebaseApp 
2017-08-16 16:06:27,917 [thread 189]   INFO - t.javadoc.JavaDocInfoGenerator - Wrong navElement: FUN; original = KtLightMethodImpl:encodeProductsAsJsonStringArray of class class org.jetbrains.kotlin.asJava.elements.KtLightMethodImpl 
2017-08-16 16:06:28,413 [ pool 9/12]   INFO - project.TargetPlatformDetector - Using default platform for file: Triple.class 
2017-08-16 16:09:32,805 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:09:32,807 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:09:32,807 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:09:32,807 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:09:32,807 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:09:32,807 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:09:32,807 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Last Action: GotoDeclaration 
2017-08-16 16:09:32,807 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:09:32,809 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:09:32,809 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:09:32,809 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:09:32,809 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:09:32,809 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:09:32,809 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Last Action: GotoDeclaration 
2017-08-16 16:09:33,962 [thread 190]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/repository2-1.xml 
2017-08-16 16:09:34,139 [thread 190]   INFO - dea.updater.SdkComponentSource - Downloading file:/home/matti/Tools/android-studio-canary/android-studio/plugins/sdk-updates/offline-repo/offline-repo.xml 
2017-08-16 16:09:34,144 [thread 190]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/sys-img/android/sys-img2-1.xml 
2017-08-16 16:09:34,346 [thread 190]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/sys-img/android-wear/sys-img2-1.xml 
2017-08-16 16:09:34,497 [thread 190]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/sys-img/android-wear-cn/sys-img2-1.xml 
2017-08-16 16:09:34,662 [thread 190]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/sys-img/android-tv/sys-img2-1.xml 
2017-08-16 16:09:34,810 [thread 190]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/sys-img/google_apis/sys-img2-1.xml 
2017-08-16 16:09:35,218 [thread 190]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/sys-img/google_apis_playstore/sys-img2-1.xml 
2017-08-16 16:09:35,366 [thread 190]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/addon2-1.xml 
2017-08-16 16:09:35,441 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:09:35,442 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:09:35,442 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:09:35,442 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:09:35,442 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:09:35,442 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:09:35,442 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Last Action: GotoDeclaration 
2017-08-16 16:09:35,442 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:09:35,443 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:09:35,443 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:09:35,443 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:09:35,443 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:09:35,443 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:09:35,443 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Last Action: GotoDeclaration 
2017-08-16 16:09:35,551 [thread 190]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/glass/addon2-1.xml 
2017-08-16 16:09:35,692 [thread 190]   INFO - dea.updater.SdkComponentSource - Downloading https://dl.google.com/android/repository/extras/intel/addon2-1.xml 
2017-08-16 16:09:36,674 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:09:36,675 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:09:36,675 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:09:36,675 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:09:36,675 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:09:36,675 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:09:36,675 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Last Action: GotoDeclaration 
2017-08-16 16:09:36,675 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:09:36,676 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:09:36,676 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:09:36,676 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:09:36,676 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:09:36,676 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:09:36,676 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Last Action: GotoDeclaration 
2017-08-16 16:09:37,479 [ pool 9/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:09:37,480 [ pool 9/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:09:37,480 [ pool 9/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:09:37,480 [ pool 9/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:09:37,480 [ pool 9/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:09:37,480 [ pool 9/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:09:37,480 [ pool 9/12]  ERROR - aemon.impl.PassExecutorService - Last Action: GotoDeclaration 
2017-08-16 16:09:37,480 [ pool 9/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:09:37,480 [ pool 9/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:09:37,480 [ pool 9/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:09:37,480 [ pool 9/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:09:37,480 [ pool 9/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:09:37,480 [ pool 9/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:09:37,480 [ pool 9/12]  ERROR - aemon.impl.PassExecutorService - Last Action: GotoDeclaration 
2017-08-16 16:10:10,732 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:10:10,733 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:10:10,733 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:10:10,733 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:10:10,733 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:10:10,733 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:10:10,733 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Last Action: GotoDeclaration 
2017-08-16 16:10:10,733 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:10:10,733 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:10:10,733 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:10:10,733 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:10:10,733 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:10:10,733 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:10:10,733 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Last Action: GotoDeclaration 
2017-08-16 16:10:16,153 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.concurrency.ApplierCompleter.tryToExecAllList(ApplierCompleter.java:222)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:151)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:10:16,153 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:10:16,153 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:10:16,153 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:10:16,153 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:10:16,153 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:10:16,153 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Last Action: GotoDeclaration 
2017-08-16 16:10:16,153 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderItem.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.concurrency.ApplierCompleter.tryToExecAllList(ApplierCompleter.java:222)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:151)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:10:16,154 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:10:16,154 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:10:16,154 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:10:16,154 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:10:16,154 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:10:16,154 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Last Action: GotoDeclaration 
2017-08-16 16:10:46,971 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:10:46,972 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:10:46,972 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:10:46,972 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:10:46,972 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:10:46,972 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:10:46,972 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorEscape 
2017-08-16 16:10:46,972 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:10:46,972 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:10:46,972 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:10:46,972 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:10:46,972 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:10:46,972 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:10:46,972 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorEscape 
2017-08-16 16:10:53,160 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:10:53,161 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:10:53,161 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:10:53,161 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:10:53,161 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:10:53,161 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:10:53,161 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Last Action: GotoDeclaration 
2017-08-16 16:10:53,161 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:10:53,161 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:10:53,161 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:10:53,161 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:10:53,161 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:10:53,161 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:10:53,161 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Last Action: GotoDeclaration 
2017-08-16 16:10:54,630 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:10:54,631 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:10:54,631 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:10:54,631 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:10:54,631 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:10:54,631 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:10:54,631 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - Last Action: GotoDeclaration 
2017-08-16 16:10:54,631 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:10:54,631 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:10:54,631 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:10:54,631 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:10:54,631 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:10:54,631 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:10:54,631 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - Last Action: GotoDeclaration 
2017-08-16 16:11:45,893 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:11:45,894 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:11:45,894 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:11:45,894 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:11:45,894 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:11:45,894 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:11:45,894 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorBackSpace 
2017-08-16 16:11:45,894 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:11:45,894 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:11:45,894 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:11:45,894 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:11:45,894 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:11:45,894 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:11:45,894 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorBackSpace 
2017-08-16 16:11:48,987 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:11:48,987 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:11:48,987 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:11:48,987 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:11:48,987 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:11:48,987 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:11:48,987 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorLeft 
2017-08-16 16:11:48,987 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:11:48,988 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:11:48,988 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:11:48,988 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:11:48,988 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:11:48,988 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:11:48,988 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorLeft 
2017-08-16 16:11:52,283 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:11:52,284 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:11:52,284 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:11:52,284 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:11:52,284 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:11:52,284 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:11:52,284 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorRightWithSelection 
2017-08-16 16:11:52,284 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeCartItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:11:52,284 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:11:52,284 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:11:52,284 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:11:52,284 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:11:52,284 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:11:52,284 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorRightWithSelection 
2017-08-16 16:11:53,794 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:11:53,795 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:11:53,795 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:11:53,795 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:11:53,795 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:11:53,795 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:11:53,795 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorRightWithSelection 
2017-08-16 16:11:53,795 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:11:53,795 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:11:53,795 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:11:53,795 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:11:53,795 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:11:53,795 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:11:53,795 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorRightWithSelection 
2017-08-16 16:11:54,216 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:11:54,217 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:11:54,217 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:11:54,217 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:11:54,217 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:11:54,217 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:11:54,217 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:11:54,217 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
