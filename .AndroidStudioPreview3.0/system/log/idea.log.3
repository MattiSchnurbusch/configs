2017-08-16 16:11:54,218 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:11:54,218 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:11:54,218 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:11:54,218 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:11:54,218 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:11:54,218 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:12:00,737 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitRestElementsAndCleanup$4(LocalInspectionsPass.java:305)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:12:00,738 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:12:00,738 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:12:00,738 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:12:00,738 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:12:00,738 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:12:00,738 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:12:00,738 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitRestElementsAndCleanup$4(LocalInspectionsPass.java:305)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:12:00,738 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:12:00,738 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:12:00,738 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:12:00,738 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:12:00,738 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:12:00,738 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:12:03,777 [ pool 2/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:12:03,778 [ pool 2/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:12:03,778 [ pool 2/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:12:03,778 [ pool 2/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:12:03,778 [ pool 2/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:12:03,778 [ pool 2/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:12:03,778 [ pool 2/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:12:03,778 [ pool 2/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:12:03,778 [ pool 2/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:12:03,778 [ pool 2/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:12:03,778 [ pool 2/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:12:03,778 [ pool 2/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:12:03,778 [ pool 2/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:12:03,778 [ pool 2/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:12:21,235 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitRestElementsAndCleanup$4(LocalInspectionsPass.java:305)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:12:21,235 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:12:21,235 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:12:21,235 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:12:21,235 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:12:21,235 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:12:21,235 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:12:21,235 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitRestElementsAndCleanup$4(LocalInspectionsPass.java:305)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:12:21,236 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:12:21,236 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:12:21,236 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:12:21,236 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:12:21,236 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:12:21,236 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:12:47,512 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:12:47,513 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:12:47,513 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:12:47,513 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:12:47,513 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:12:47,513 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:12:47,513 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:12:47,513 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:12:47,513 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:12:47,513 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:12:47,513 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:12:47,513 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:12:47,513 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:12:47,513 [ pool 3/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:13:11,165 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:11,166 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:11,166 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:11,166 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:11,166 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:11,166 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:11,166 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:13:11,500 [ pool 4/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:11,501 [ pool 4/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:11,501 [ pool 4/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:11,501 [ pool 4/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:11,501 [ pool 4/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:11,502 [ pool 4/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:11,502 [ pool 4/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:13:11,502 [ pool 4/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:11,502 [ pool 4/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:11,502 [ pool 4/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:11,502 [ pool 4/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:11,502 [ pool 4/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:11,502 [ pool 4/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:11,502 [ pool 4/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:13:12,402 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:12,403 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:12,403 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:12,403 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:12,403 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:12,403 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:12,403 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:13:12,403 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:12,403 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:12,403 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:12,403 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:12,403 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:12,403 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:12,403 [ pool 0/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:13:13,003 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:13,004 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:13,004 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:13,004 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:13,004 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:13,004 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:13,004 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:13:13,004 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:13,004 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:13,004 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:13,004 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:13,004 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:13,004 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:13,004 [ pool 5/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:13:25,801 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitRestElementsAndCleanup$4(LocalInspectionsPass.java:305)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:25,802 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:25,802 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:25,802 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:25,802 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:25,802 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:25,802 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:13:25,802 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitRestElementsAndCleanup$4(LocalInspectionsPass.java:305)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:25,802 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:25,802 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:25,802 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:25,802 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:25,802 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:25,802 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:13:41,280 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitRestElementsAndCleanup$4(LocalInspectionsPass.java:305)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:41,281 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:41,281 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:41,281 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:41,281 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:41,281 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:41,281 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:13:41,281 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitRestElementsAndCleanup$4(LocalInspectionsPass.java:305)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:41,281 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:41,281 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:41,281 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:41,281 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:41,281 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:41,281 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:13:42,114 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitRestElementsAndCleanup$4(LocalInspectionsPass.java:305)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:42,114 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:42,114 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:42,114 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:42,114 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:42,114 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:42,114 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:13:42,115 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitRestElementsAndCleanup$4(LocalInspectionsPass.java:305)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:42,115 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:42,115 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:42,115 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:42,115 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:42,115 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:42,115 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:13:43,836 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitRestElementsAndCleanup$4(LocalInspectionsPass.java:305)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:43,837 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:43,837 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:43,837 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:43,837 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:43,837 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:43,837 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:13:43,837 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitRestElementsAndCleanup$4(LocalInspectionsPass.java:305)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:43,837 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:43,837 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:43,837 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:43,837 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:43,837 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:43,837 [pool 11/12]  ERROR - aemon.impl.PassExecutorService - Last Action: EditorDown 
2017-08-16 16:13:46,133 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitRestElementsAndCleanup$4(LocalInspectionsPass.java:305)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:46,133 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:46,133 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:46,133 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:46,133 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:46,133 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:46,133 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Last Action: OverrideMethods 
2017-08-16 16:13:46,133 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitRestElementsAndCleanup$4(LocalInspectionsPass.java:305)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:46,133 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:46,134 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:46,134 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:46,134 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:46,134 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:46,134 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Last Action: OverrideMethods 
2017-08-16 16:13:56,181 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitRestElementsAndCleanup$4(LocalInspectionsPass.java:305)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:56,182 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:56,182 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:56,182 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:56,182 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:56,182 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:56,182 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Last Action: OverrideMethods 
2017-08-16 16:13:56,182 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitRestElementsAndCleanup$4(LocalInspectionsPass.java:305)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:13:56,182 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:13:56,182 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:13:56,182 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:13:56,182 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:13:56,182 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:13:56,182 [ pool 7/12]  ERROR - aemon.impl.PassExecutorService - Last Action: OverrideMethods 
2017-08-16 16:14:02,901 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:14:02,902 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:14:02,902 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:14:02,902 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:14:02,902 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:14:02,902 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:14:02,902 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Last Action: OverrideMethods 
2017-08-16 16:14:02,902 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:14:02,902 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:14:02,902 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:14:02,902 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:14:02,902 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:14:02,902 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:14:02,902 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Last Action: OverrideMethods 
2017-08-16 16:14:08,530 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:14:08,530 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:14:08,530 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:14:08,530 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:14:08,531 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:14:08,531 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:14:08,531 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Last Action: OverrideMethods 
2017-08-16 16:14:08,531 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:14:08,531 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:14:08,531 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:14:08,531 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:14:08,531 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:14:08,531 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:14:08,531 [ pool 1/12]  ERROR - aemon.impl.PassExecutorService - Last Action: OverrideMethods 
2017-08-16 16:14:09,159 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:14:09,160 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:14:09,160 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:14:09,160 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:14:09,160 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:14:09,160 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:14:09,160 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Last Action: OverrideMethods 
2017-08-16 16:14:09,160 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.jetbrains.kotlin.idea.inspections.KotlinInvalidBundleOrPropertyInspection$buildVisitor$1.visitStringTemplateExpression(KotlinInvalidBundleOrPropertyInspection.kt:95)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:953)
	at org.jetbrains.kotlin.psi.KtVisitorVoid.visitStringTemplateExpression(KtVisitorVoid.java:21)
	at org.jetbrains.kotlin.psi.KtStringTemplateExpression.accept(KtStringTemplateExpression.java:37)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:50)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:14:09,161 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:14:09,161 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:14:09,161 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:14:09,161 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:14:09,161 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:14:09,161 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Last Action: OverrideMethods 
2017-08-16 16:14:11,101 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:14:11,101 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:14:11,102 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:14:11,102 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:14:11,102 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:14:11,102 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:14:11,102 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Last Action: OverrideMethods 
2017-08-16 16:14:11,102 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
2017-08-16 16:14:11,102 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Android Studio 3.0 Canary 9  Build #AI-171.4220116 
2017-08-16 16:14:11,102 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - JDK: 1.8.0_152-release 
2017-08-16 16:14:11,102 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - VM: OpenJDK 64-Bit Server VM 
2017-08-16 16:14:11,102 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Vendor: JetBrains s.r.o 
2017-08-16 16:14:11,102 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - OS: Linux 
2017-08-16 16:14:11,102 [pool 10/12]  ERROR - aemon.impl.PassExecutorService - Last Action: OverrideMethods 
2017-08-16 16:14:18,590 [ pool 8/12]  ERROR - aemon.impl.PassExecutorService - Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-
 
org.jetbrains.kotlin.resolve.lazy.NoDescriptorForDeclarationException: Descriptor wasn't found for declaration PROPERTY
File name: AdjustTracker.kt Physical: true Injected: false
object AdjustTracker {

    // TOKENS
    const val ADD_TO_CART_TOKEN = "gqs0r4"
    const val COMPLETE_CHECKOUT_TOKEN = "glb5sg"
    const val INITIATE_CHECKOUT_TOKEN = "xu2pjn"
    const val LOGIN_TOKEN = "xjtsem"
    const val PRODUCT_PIN_TOKEN = "23484p"
    const val PRODUCT_SEARCH_TOKEN = "gck8ze"
    const val PRODUCT_VIEW_TOKEN = "h4cpig"
    const val REGISTRATION_TOKEN = "po413t"
    const val PRODUCT_SHARE_TOKEN = "gejkxi"
    const val MARK_AS_CONFIRMED_TOKEN = "awwu8v"
    const val MARK_AS_PAID_TOKEN = "dq0pb1"
    const val MARK_AS_SENT_TOKEN = "tkvgqm"

    // CALLBACK KEYS
    const val REGISTRATION_KEY = "registration_type"
    const val LOGIN_KEY = "login_type"
    const val TYPE_FACEBOOK = "facebook"
    const val TYPE_EMAIL = "email"
    const val PRODUCT_ID_KEY = "product_id"
    const val PRODUCT_CATEGORY_KEY = "product_category"
    const val SHOP_ID_KEY = "shop_id"
    const val SEARCH_TERM_KEY = "searchterm"
    const val SCREENNAME_KEY = "screen_name"
    const val QUANTITY_KEY = "quantity"
    const val BASE_PRICE_KEY = "base_price"
    const val TOTAL_PRICE_KEY = "base_price"
    const val DEAL_KEY = "base_price"
    const val DEAL_VALUE_KEY = "base_price"
    const val CURRENCY_KEY = "base_price"

    // FB PARTNER KEYS
    const val FB_CONTENT_ID_KEY = "fb_content_id"
    const val FB_CONTENT_TYPE_KEY = "fb_content_type"
    const val FB_CONTENT_TYPE_PRODUCT_KEY = "product"
    const val FB_PRODUCT_VALUE_KEY = "_valueToSum"
    const val FB_CURRENCY_KEY = "fb_currency"

    enum class OrderActionType(val token: String) {
        MARK_AS_SENT(MARK_AS_SENT_TOKEN), MARK_AS_CONFIRMED(MARK_AS_CONFIRMED_TOKEN), MARK_AS_PAID(MARK_AS_PAID_TOKEN)
    }

    fun trackRegistration(registrationType: String) {
        val adjustEvent = AdjustEvent(REGISTRATION_TOKEN)
        adjustEvent.addCallbackParameter(REGISTRATION_KEY, registrationType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackLogin(loginType: String) {
        val adjustEvent = AdjustEvent(LOGIN_TOKEN)
        adjustEvent.addCallbackParameter(LOGIN_KEY, loginType)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackSearchResults(products: List<Product>, searchTerm: String?) {
        if (products.isEmpty()) return

        val productsSublist = if (products.size > 5) products.subList(0, 5) else products.subList(0, products.size)

        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(productsSublist)
        val adjustEvent = AdjustEvent(PRODUCT_SEARCH_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productCategories)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        if (searchTerm != null) adjustEvent.addCallbackParameter(SEARCH_TERM_KEY, searchTerm)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, productCategories)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductView(product: Product, screenName: String) {
        val adjustEvent = AdjustEvent(PRODUCT_VIEW_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(SCREENNAME_KEY, screenName)
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackProductPin(product: Product) {
        val adjustEvent = AdjustEvent(PRODUCT_PIN_TOKEN)
        addDefaultProductParamsToEvent(adjustEvent, product)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackShareProduct(productDetails: ProductDetails) {
        val adjustEvent = AdjustEvent(PRODUCT_SHARE_TOKEN)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productDetails.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, productDetails.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, productDetails.categoryId.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackAddToCart(product: ProductDetails, quantity: Int) {
        val adjustEvent = AdjustEvent(ADD_TO_CART_TOKEN)
        val total = PriceUtils.convertCentsToPrice((quantity.toLong() * product.price.cents)).toString()
        addDefaultProductParamsToEvent(adjustEvent, product)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantity.toString())
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, product.basePrice.priceAsLabel())
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        adjustEvent.addCallbackParameter(DEAL_KEY, product.isSpecialDiscount.toString())
        if (product.isSpecialDiscount) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.price.currency.toString())
        }
        if (product.salePercentage != null) {
            adjustEvent.addCallbackParameter(DEAL_VALUE_KEY, product.salePercentage.toString())
        }
        addDefaultFacebookPartnerParams(adjustEvent, product)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, product.price.currency.toString())
        Adjust.trackEvent(adjustEvent)
    }

    fun trackInitiateCheckout(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(INITIATE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackCheckoutCompleted(cartItems: CartItems) {
        val adjustEvent = AdjustEvent(COMPLETE_CHECKOUT_TOKEN)
        val total = getTotal(cartItems)
        val currency = cartItems.sellers.first().cartItems.first().product.price.currency.toString()
        val (productIds: String, shopIds: String, quantities: String, prices: String) = encodeCartItemsAsJsonStringArray(cartItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, shopIds)
        adjustEvent.addCallbackParameter(QUANTITY_KEY, quantities)
        adjustEvent.addCallbackParameter(BASE_PRICE_KEY, prices)
        adjustEvent.addCallbackParameter(CURRENCY_KEY, currency)
        adjustEvent.addCallbackParameter(TOTAL_PRICE_KEY, total)

        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, productIds)
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
        adjustEvent.addPartnerParameter(FB_CURRENCY_KEY, currency)
        adjustEvent.addPartnerParameter(FB_PRODUCT_VALUE_KEY, total)
        adjustEvent.setRevenue(total.toDouble(), currency)
        Adjust.trackEvent(adjustEvent)
    }

    fun trackOrderAction(orderDetails: OrderDetails, type: OrderActionType) {
        val adjustEvent = AdjustEvent(type.token)
        val (productIds: String, productCategories: String, shopIds: String) = encodeProductsAsJsonStringArray(orderDetails.orderItems)
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, productIds)
    }

    private fun addDefaultFacebookPartnerParams(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addPartnerParameter(FB_CONTENT_ID_KEY, product.id.toString())
        adjustEvent.addPartnerParameter(FB_CONTENT_TYPE_KEY, FB_CONTENT_TYPE_PRODUCT_KEY)
    }

    private fun addDefaultProductParamsToEvent(adjustEvent: AdjustEvent, product: Product) {
        adjustEvent.addCallbackParameter(PRODUCT_ID_KEY, product.id.toString())
        adjustEvent.addCallbackParameter(SHOP_ID_KEY, product.shop.id.toString())
        adjustEvent.addCallbackParameter(PRODUCT_CATEGORY_KEY, product.categoryId.toString())
    }

    private fun encodeCartItemsAsJsonStringArray(cartItems: CartItems): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (seller: CartSeller in cartItems.sellers) {
            for (cartItem: CartItem in seller.cartItems) {
                if (cartItem.product.isValid) {
                    productIds = productIds.plus(""""${cartItem.product.id}",""")
                    shopIds = shopIds.plus(""""${seller.shopId}",""")
                    quantities = quantities.plus(""""${cartItem.quantity}",""")
                    prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
                }
            }
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeOrderItemsAsJsonStringArray(orderDetails: OrderDetails): Quadruple<String, String, String, String> {
        var productIds: String = "["
        var shopIds: String = "["
        var quantities: String = "["
        var prices: String = "["

        for (orderItem: OrderItem in orderDetails.orderItems) {
            productIds = productIds.plus(""""${orderItem.id}",""")
            shopIds = shopIds.plus(""""${orderDetails.}",""")
            quantities = quantities.plus(""""${cartItem.quantity}",""")
            prices = prices.plus(""""${cartItem.product.basePrice.priceAsDouble}",""")
        }
        productIds = replaceLastComma(productIds)
        shopIds = replaceLastComma(shopIds)
        quantities = replaceLastComma(quantities)
        prices = replaceLastComma(prices)
        return Quadruple(productIds, shopIds, quantities, prices)
    }

    private fun encodeProductsAsJsonStringArray(products: List<IProduct>): Triple<String, String, String> {
        <caret>var productIds: String = "["
        var productCategories: String = "["
        var shopIds: String = "["

        for (iProduct: IProduct in products) {
            val product = iProduct.product
            productIds = productIds.plus(""""${product?.id}",""")
            productCategories = productCategories.plus(""""${product?.categoryId}",""")
            shopIds = shopIds.plus(""""${product?.shop?.id}",""")
        }
        productIds = replaceLastComma(productIds)
        productCategories = replaceLastComma(productCategories)
        shopIds = replaceLastComma(shopIds)
        return Triple(productIds, productCategories, shopIds)
    }

    private fun getTotal(cartItems: CartItems): String {
        val total: Double = cartItems.sellers
                .flatMap { it.cartItems }
                .filter { it.product.isValid }
                .sumByDouble { (it.quantity * it.product.price.cents).toDouble() }
        return (total / 100).toString()
    }

    private fun replaceLastComma(toReplace: String): String {
        var temp = toReplace
        var lastIndexOf = temp.lastIndexOf(",")
        temp = StringBuilder(temp).replace(lastIndexOf, lastIndexOf + 1, "]").toString()
        return temp
    }

    // small helper class to be able to return 4 objects in a method
    private data class Quadruple
    <out A, out B, out C, out D>(
            val first: A,
            val second: B,
            val third: C,
            val fourth: D
    )
}
---------------------------------------------------
PluginDeclarationProviderFactory
On failure:
-no synthetic files-
On creation:
-no synthetic files-

	at org.jetbrains.kotlin.idea.project.IdeaAbsentDescriptorHandler.diagnoseDescriptorNotFound(IdeaLocalDescriptorResolver.kt:44)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionFacadeImpl.resolveToDescriptor(ResolutionFacadeImpl.kt:67)
	at org.jetbrains.kotlin.idea.caches.resolve.ResolutionUtils.resolveToDescriptor(resolutionApi.kt:42)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.getBundleNameByContext(referenceProviders.kt:67)
	at org.jetbrains.kotlin.idea.properties.ReferenceProvidersKt.access$getBundleNameByContext(referenceProviders.kt:1)
	at org.jetbrains.kotlin.idea.properties.KotlinPropertyKeyReferenceProvider.getReferencesByElement(referenceProviders.kt:132)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.getReferences(ReferenceProvidersRegistryImpl.java:135)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.mapNotEmptyReferencesFromProviders(ReferenceProvidersRegistryImpl.java:123)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistryImpl.doGetReferencesFromProviders(ReferenceProvidersRegistryImpl.java:102)
	at com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry.getReferencesFromProviders(ReferenceProvidersRegistry.java:66)
	at org.jetbrains.kotlin.psi.KtElementImpl.getReferences(KtElementImpl.java:91)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesContributor.getInjectedReferences(InjectedReferencesContributor.java:56)
	at org.intellij.plugins.intelliLang.references.InjectedReferencesInspection$1.visitElement(InjectedReferencesInspection.java:40)
	at org.jetbrains.kotlin.psi.KtElementImpl.accept(KtElementImpl.java:53)
	at com.intellij.codeInspection.InspectionEngine.acceptElements(InspectionEngine.java:81)
	at com.intellij.codeInspection.InspectionEngine.createVisitorAndAcceptElements(InspectionEngine.java:69)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.runToolOnElements(LocalInspectionsPass.java:282)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.lambda$visitPriorityElementsAndInit$3(LocalInspectionsPass.java:250)
	at com.intellij.concurrency.ApplierCompleter.execAndForkSubTasks(ApplierCompleter.java:133)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1150)
	at com.intellij.concurrency.ApplierCompleter.lambda$wrapInReadActionAndIndicator$1(ApplierCompleter.java:105)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.concurrency.ApplierCompleter.wrapInReadActionAndIndicator(ApplierCompleter.java:116)
	at com.intellij.concurrency.ApplierCompleter.lambda$compute$0(ApplierCompleter.java:96)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.concurrency.ApplierCompleter.compute(ApplierCompleter.java:96)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.pollAndExecCC(ForkJoinPool.java:1190)
	at java.util.concurrent.ForkJoinPool.helpComplete(ForkJoinPool.java:1879)
	at java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:2045)
	at java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:390)
	at java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:719)
	at java.util.concurrent.ForkJoinPool.invoke(ForkJoinPool.java:2616)
	at com.intellij.concurrency.JobLauncherImpl.invokeConcurrentlyUnderProgress(JobLauncherImpl.java:63)
	at com.intellij.concurrency.JobLauncher.invokeConcurrentlyUnderProgress(JobLauncher.java:57)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.visitPriorityElementsAndInit(LocalInspectionsPass.java:253)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.inspect(LocalInspectionsPass.java:223)
	at com.intellij.codeInsight.daemon.impl.LocalInspectionsPass.collectInformationWithProgress(LocalInspectionsPass.java:132)
	at com.intellij.codeInsight.daemon.impl.ProgressableTextEditorHighlightingPass.doCollectInformation(ProgressableTextEditorHighlightingPass.java:83)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:70)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:438)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1156)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:431)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:556)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:501)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:66)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:430)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:406)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:142)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:242)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:404)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:165)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
